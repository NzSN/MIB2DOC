cscope 15 D:\Projects\MIB2DOC"               0000130093
	@include/dispatcher.h

1 #i‚de‡
_DISPATCHER_H_


2 
	#_DISPATCHER_H_


	)

4 
	~"ty≥.h
"

5 
	~"°ack.h
"

6 
	~"li°.h
"

7 
	~"Àxî.h
"

10 
	sdi•©chP¨am
 {

11 *
	m∑øm
;

12 
li°Node
 
	mnode
;

13 } 
	tdi•©chP¨am
;

15 
	edi•©ch_ty≥
 {

16 
	mDISPATCH_PARAM_STAGE
 = 0,

17 
	mMIBTREE_GENERATION
,

18 
	mSYMBOL_COLLECTING
,

19 
	mSWITCH_TO_INC_BUFFER
,

20 
	mIGNORE
,

21 
	mDEBUGING


22 } 
	tdi•©ch_ty≥
;

24 
	edi•©ch_mode
 {

25 
	mDISPATCH_MODE_SYMBOL_COLLECTING
 = 0,

26 
	mDISPATCH_MODE_DOC_GENERATING
 = 1,

27 
	mDISPATCH_MODE_DEBUG
 = 2

28 } 
	tdi•©ch_mode
;

30 
	sidítLi°
 {

31 
	mfound
;

32 *
	msymName
;

33 
li°Node
 
	mnode
;

34 } 
	tidítLi°
;

36 
	scﬁÀ˘Info
 {

37 *
	mmodName
;

38 
idítLi°
 *
	msymbﬁs
;

39 } 
	tcﬁÀ˘Info
;

41 
	sswôchInfo
 {

42 
cﬁÀ˘Info
 
	mimp‹tInfo
;

43 
YY_BUFFER_STATE
 
	mbuf„rInfo
;

44 } 
	tswôchInfo
;

46 
	#MAX_INCLUDE_DEPTH
 10

	)

47 
	sswôchögSèã
 {

49 
	m°©e
;

51 
	mcou¡î
;

53 
swôchInfo
 
	mcuºítSwôchInfo
;

55 
gíîicSèck
 
	mswSèck
;

56 } 
	tswôchögSèã
;

58 
	#SW_CUR_IMPORT
(
SW_STATE
Ë(SW_STATE.
cuºítSwôchInfo
.
imp‹tInfo
)

	)

59 
	#SW_CUR_IMPORT_REF
(
SW_STATE
Ë(&
	`SW_CUR_IMPORT
(SW_STATE))

	)

60 
	#SW_CUR_BUFFER_INFO
(
SW_STATE
Ë(SW_STATE.
cuºítSwôchInfo
.
buf„rInfo
)

	)

61 
	#SW_CUR_BUFFER_INFO_REF
(
SW_STATE
Ë(&
	`SW_CUR_BUFFER_INFO
(SW_STATE))

	)

63 
	#SW_STACK_BASE
(
SW_STATE
Ë(SW_STATE.
swSèck
.
ba£
)

	)

64 
	#SW_STACK_TOP
(
SW_STATE
Ë(SW_STATE.
swSèck
.
t›
)

	)

65 
	#SW_STACK_BUFFER_SIZE
(
SW_STATE
Ë(SW_STATE.
swSèck
.
buf„rSize
)

	)

66 
	#SW_STACK_UNIT_SIZE
(
SW_STATE
Ë(SW_STATE.
swSèck
.
unôSize
)

	)

68 
di•©ch_mode
 
di•©chMode
;

69 
swôchögSèã
 
swSèã
;

71 
di•©chInô
();

73 
di•©chP¨am
 * 
disP¨amC⁄°ru˘
(*
¨g
);

74 
di•©chP¨am
 * 
disP¨amSt‹e
(di•©chP¨am *
hód
, di•©chP¨am *
∂
);

75 
di•©chP¨am
 * 
disP¨amRërive
(di•©chP¨am **
hód
);

77 
YY_BUFFER_STATE
 
gëCuºítBuf„rSèã
();

78 * 
swôch_CuºítMod
(*
modName
, 
Àn
);

79 
di•©ch
(
di•©ch_ty≥
 
dTy≥
, 
di•©chP¨am
 * 
∑øm
);

80 
rmSymFromIdítLi°
(
idítLi°
 *
li°Hód
, *
symbﬁIdít
);

	@include/docGenerate.h

5 
	~"ty≥.h
"

7 #i‚de‡
UNIT_TEST_DOCGENERATE_H


8 
	#UNIT_TEST_DOCGENERATE_H


	)

10 
	sèbÀInfo
 {

11 *
	midítifõr
;

12 *
	moid
;

13 *
	mrw
;

14 *
	mty≥
;

15 *
	mdesc
;

16 } 
	tèbÀInfo
;

18 
documítGí
(
mibObje˘TªeNode
 *
roŸ
, 
FILE
 *
wrôeTo
);

	@include/lexDeal.h

5 #i‚de‡
UNIT_TEST_LEXDEAL_H


6 
	#UNIT_TEST_LEXDEAL_H


	)

8 * 
°rDu∂iˇã
(*
§c
);

	@include/lexer.h

1 #i‚de‡
yyHEADER_H


2 
	#yyHEADER_H
 1

	)

3 
	#yyIN_HEADER
 1

	)

9 
	#YY_INT_ALIGNED
 

	)

13 
	#FLEX_SCANNER


	)

14 
	#YY_FLEX_MAJOR_VERSION
 2

	)

15 
	#YY_FLEX_MINOR_VERSION
 6

	)

16 
	#YY_FLEX_SUBMINOR_VERSION
 4

	)

17 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

18 
	#FLEX_BETA


	)

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<î∫o.h
>

27 
	~<°dlib.h
>

33 #i‚de‡
FLEXINT_H


34 
	#FLEXINT_H


	)

38 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

43 #i‚de‡
__STDC_LIMIT_MACROS


44 
	#__STDC_LIMIT_MACROS
 1

	)

47 
	~<öây≥s.h
>

48 
öt8_t
 
	tÊex_öt8_t
;

49 
uöt8_t
 
	tÊex_uöt8_t
;

50 
öt16_t
 
	tÊex_öt16_t
;

51 
uöt16_t
 
	tÊex_uöt16_t
;

52 
öt32_t
 
	tÊex_öt32_t
;

53 
uöt32_t
 
	tÊex_uöt32_t
;

55 sig√d 
	tÊex_öt8_t
;

56 
	tÊex_öt16_t
;

57 
	tÊex_öt32_t
;

58 
	tÊex_uöt8_t
;

59 
	tÊex_uöt16_t
;

60 
	tÊex_uöt32_t
;

63 #i‚de‡
INT8_MIN


64 
	#INT8_MIN
 (-128)

	)

66 #i‚de‡
INT16_MIN


67 
	#INT16_MIN
 (-32767-1)

	)

69 #i‚de‡
INT32_MIN


70 
	#INT32_MIN
 (-2147483647-1)

	)

72 #i‚de‡
INT8_MAX


73 
	#INT8_MAX
 (127)

	)

75 #i‚de‡
INT16_MAX


76 
	#INT16_MAX
 (32767)

	)

78 #i‚de‡
INT32_MAX


79 
	#INT32_MAX
 (2147483647)

	)

81 #i‚de‡
UINT8_MAX


82 
	#UINT8_MAX
 (255U)

	)

84 #i‚de‡
UINT16_MAX


85 
	#UINT16_MAX
 (65535U)

	)

87 #i‚de‡
UINT32_MAX


88 
	#UINT32_MAX
 (4294967295U)

	)

91 #i‚de‡
SIZE_MAX


92 
	#SIZE_MAX
 (~(
size_t
)0)

	)

102 
	#yyc⁄°
 c⁄°

	)

104 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 3

105 
	#yyn‹ëu∫
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

107 
	#yyn‹ëu∫


	)

111 #i‚de‡
YY_BUF_SIZE


112 #ifde‡
__ü64__


117 
	#YY_BUF_SIZE
 32768

	)

119 
	#YY_BUF_SIZE
 16384

	)

123 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


124 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

125 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

128 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


129 
	#YY_TYPEDEF_YY_SIZE_T


	)

130 
size_t
 
	tyy_size_t
;

133 
yyÀng
;

135 
FILE
 *
yyö
, *
yyout
;

137 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


138 
	#YY_STRUCT_YY_BUFFER_STATE


	)

139 
	syy_buf„r_°©e


141 
FILE
 *
	myy_öput_fûe
;

143 *
	myy_ch_buf
;

144 *
	myy_buf_pos
;

149 
	myy_buf_size
;

154 
	myy_n_ch¨s
;

160 
	myy_is_our_buf„r
;

167 
	myy_is_öãø˘ive
;

173 
	myy_©_bﬁ
;

175 
	myy_bs_löío
;

176 
	myy_bs_cﬁumn
;

181 
	myy_fûl_buf„r
;

183 
	myy_buf„r_°©us
;

188 
yyª°¨t
 ( 
FILE
 *
öput_fûe
 );

189 
yy_swôch_to_buf„r
 ( 
YY_BUFFER_STATE
 
√w_buf„r
 );

190 
YY_BUFFER_STATE
 
yy_¸óã_buf„r
 ( 
FILE
 *
fûe
, 
size
 );

191 
yy_dñëe_buf„r
 ( 
YY_BUFFER_STATE
 
b
 );

192 
yy_Êush_buf„r
 ( 
YY_BUFFER_STATE
 
b
 );

193 
yypush_buf„r_°©e
 ( 
YY_BUFFER_STATE
 
√w_buf„r
 );

194 
yyp›_buf„r_°©e
 ( );

196 
YY_BUFFER_STATE
 
yy_sˇn_buf„r
 ( *
ba£
, 
yy_size_t
 
size
 );

197 
YY_BUFFER_STATE
 
yy_sˇn_°rög
 ( c⁄° *
yy_°r
 );

198 
YY_BUFFER_STATE
 
yy_sˇn_byãs
 ( c⁄° *
byãs
, 
Àn
 );

200 *
yyÆloc
 ( 
yy_size_t
 );

201 *
yyªÆloc
 ( *, 
yy_size_t
 );

202 
yy‰ì
 ( * );

206 
yylöío
;

208 *
yyãxt
;

209 #ifde‡
yyãxt_±r


210 #unde‡
yyãxt_±r


212 
	#yyãxt_±r
 
yyãxt


	)

214 #ifde‡
YY_HEADER_EXPORT_START_CONDITIONS


215 
	#INITIAL
 0

	)

219 #i‚de‡
YY_NO_UNISTD_H


224 
	~<uni°d.h
>

227 #i‚de‡
YY_EXTRA_TYPE


228 
	#YY_EXTRA_TYPE
 *

	)

234 
yyÀx_de°roy
 ( );

236 
yygë_debug
 ( );

238 
yy£t_debug
 ( 
debug_Êag
 );

240 
YY_EXTRA_TYPE
 
yygë_exåa
 ( );

242 
yy£t_exåa
 ( 
YY_EXTRA_TYPE
 
u£r_deföed
 );

244 
FILE
 *
yygë_ö
 ( );

246 
yy£t_ö
 ( 
FILE
 * 
_ö_°r
 );

248 
FILE
 *
yygë_out
 ( );

250 
yy£t_out
 ( 
FILE
 * 
_out_°r
 );

252 
yygë_Àng
 ( );

254 *
yygë_ãxt
 ( );

256 
yygë_löío
 ( );

258 
yy£t_löío
 ( 
_löe_numbî
 );

264 #i‚de‡
YY_SKIP_YYWRAP


265 #ifde‡
__˝lu•lus


266 "C" 
yywøp
 ( );

268 
yywøp
 ( );

272 #i‚de‡
yyãxt_±r


273 
yy_Êex_°∫˝y
 ( *, const *, );

276 #ifde‡
YY_NEED_STRLEN


277 
yy_Êex_°æí
 ( const * );

280 #i‚de‡
YY_NO_INPUT


285 #i‚de‡
YY_READ_BUF_SIZE


286 #ifde‡
__ü64__


288 
	#YY_READ_BUF_SIZE
 16384

	)

290 
	#YY_READ_BUF_SIZE
 8192

	)

295 #i‚de‡
YY_START_STACK_INCR


296 
	#YY_START_STACK_INCR
 25

	)

302 #i‚de‡
YY_DECL


303 
	#YY_DECL_IS_OURS
 1

	)

305 
yyÀx
 ();

307 
	#YY_DECL
 
	`yyÀx
 ()

	)

312 #unde‡
YY_NEW_FILE


313 #unde‡
YY_FLUSH_BUFFER


314 #unde‡
yy_£t_bﬁ


315 #unde‡
yy_√w_buf„r


316 #unde‡
yy_£t_öãø˘ive


317 #unde‡
YY_DO_BEFORE_ACTION


319 #ifde‡
YY_DECL_IS_OURS


320 #unde‡
YY_DECL_IS_OURS


321 #unde‡
YY_DECL


324 #i‚de‡
yy_¸óã_buf„r_ALREADY_DEFINED


325 #unde‡
yy_¸óã_buf„r


327 #i‚de‡
yy_dñëe_buf„r_ALREADY_DEFINED


328 #unde‡
yy_dñëe_buf„r


330 #i‚de‡
yy_sˇn_buf„r_ALREADY_DEFINED


331 #unde‡
yy_sˇn_buf„r


333 #i‚de‡
yy_sˇn_°rög_ALREADY_DEFINED


334 #unde‡
yy_sˇn_°rög


336 #i‚de‡
yy_sˇn_byãs_ALREADY_DEFINED


337 #unde‡
yy_sˇn_byãs


339 #i‚de‡
yy_öô_buf„r_ALREADY_DEFINED


340 #unde‡
yy_öô_buf„r


342 #i‚de‡
yy_Êush_buf„r_ALREADY_DEFINED


343 #unde‡
yy_Êush_buf„r


345 #i‚de‡
yy_lﬂd_buf„r_°©e_ALREADY_DEFINED


346 #unde‡
yy_lﬂd_buf„r_°©e


348 #i‚de‡
yy_swôch_to_buf„r_ALREADY_DEFINED


349 #unde‡
yy_swôch_to_buf„r


351 #i‚de‡
yypush_buf„r_°©e_ALREADY_DEFINED


352 #unde‡
yypush_buf„r_°©e


354 #i‚de‡
yyp›_buf„r_°©e_ALREADY_DEFINED


355 #unde‡
yyp›_buf„r_°©e


357 #i‚de‡
yyísuª_buf„r_°ack_ALREADY_DEFINED


358 #unde‡
yyísuª_buf„r_°ack


360 #i‚de‡
yyÀx_ALREADY_DEFINED


361 #unde‡
yyÀx


363 #i‚de‡
yyª°¨t_ALREADY_DEFINED


364 #unde‡
yyª°¨t


366 #i‚de‡
yyÀx_öô_ALREADY_DEFINED


367 #unde‡
yyÀx_öô


369 #i‚de‡
yyÀx_öô_exåa_ALREADY_DEFINED


370 #unde‡
yyÀx_öô_exåa


372 #i‚de‡
yyÀx_de°roy_ALREADY_DEFINED


373 #unde‡
yyÀx_de°roy


375 #i‚de‡
yygë_debug_ALREADY_DEFINED


376 #unde‡
yygë_debug


378 #i‚de‡
yy£t_debug_ALREADY_DEFINED


379 #unde‡
yy£t_debug


381 #i‚de‡
yygë_exåa_ALREADY_DEFINED


382 #unde‡
yygë_exåa


384 #i‚de‡
yy£t_exåa_ALREADY_DEFINED


385 #unde‡
yy£t_exåa


387 #i‚de‡
yygë_ö_ALREADY_DEFINED


388 #unde‡
yygë_ö


390 #i‚de‡
yy£t_ö_ALREADY_DEFINED


391 #unde‡
yy£t_ö


393 #i‚de‡
yygë_out_ALREADY_DEFINED


394 #unde‡
yygë_out


396 #i‚de‡
yy£t_out_ALREADY_DEFINED


397 #unde‡
yy£t_out


399 #i‚de‡
yygë_Àng_ALREADY_DEFINED


400 #unde‡
yygë_Àng


402 #i‚de‡
yygë_ãxt_ALREADY_DEFINED


403 #unde‡
yygë_ãxt


405 #i‚de‡
yygë_löío_ALREADY_DEFINED


406 #unde‡
yygë_löío


408 #i‚de‡
yy£t_löío_ALREADY_DEFINED


409 #unde‡
yy£t_löío


411 #i‚de‡
yygë_cﬁumn_ALREADY_DEFINED


412 #unde‡
yygë_cﬁumn


414 #i‚de‡
yy£t_cﬁumn_ALREADY_DEFINED


415 #unde‡
yy£t_cﬁumn


417 #i‚de‡
yywøp_ALREADY_DEFINED


418 #unde‡
yywøp


420 #i‚de‡
yygë_lvÆ_ALREADY_DEFINED


421 #unde‡
yygë_lvÆ


423 #i‚de‡
yy£t_lvÆ_ALREADY_DEFINED


424 #unde‡
yy£t_lvÆ


426 #i‚de‡
yygë_Œoc_ALREADY_DEFINED


427 #unde‡
yygë_Œoc


429 #i‚de‡
yy£t_Œoc_ALREADY_DEFINED


430 #unde‡
yy£t_Œoc


432 #i‚de‡
yyÆloc_ALREADY_DEFINED


433 #unde‡
yyÆloc


435 #i‚de‡
yyªÆloc_ALREADY_DEFINED


436 #unde‡
yyªÆloc


438 #i‚de‡
yy‰ì_ALREADY_DEFINED


439 #unde‡
yy‰ì


441 #i‚de‡
yyãxt_ALREADY_DEFINED


442 #unde‡
yyãxt


444 #i‚de‡
yyÀng_ALREADY_DEFINED


445 #unde‡
yyÀng


447 #i‚de‡
yyö_ALREADY_DEFINED


448 #unde‡
yyö


450 #i‚de‡
yyout_ALREADY_DEFINED


451 #unde‡
yyout


453 #i‚de‡
yy_Êex_debug_ALREADY_DEFINED


454 #unde‡
yy_Êex_debug


456 #i‚de‡
yylöío_ALREADY_DEFINED


457 #unde‡
yylöío


459 #i‚de‡
yyèbÀs_Êﬂd_ALREADY_DEFINED


460 #unde‡
yyèbÀs_Êﬂd


462 #i‚de‡
yyèbÀs_de°roy_ALREADY_DEFINED


463 #unde‡
yyèbÀs_de°roy


465 #i‚de‡
yyTABLES_NAME_ALREADY_DEFINED


466 #unde‡
yyTABLES_NAME


473 #unde‡
yyIN_HEADER


	@include/list.h

5 #i‚de‡
_MIB2DOC_LIST_H_


6 
	#_MIB2DOC_LIST_H_


	)

8 
	~<°dboﬁ.h
>

10 
	eñemítTy≥
 {

11 
	mSLICE_TYPE_MINIMUM
 = 5,

12 
	mSLICE_IDENTIFIER
,

13 
	mSLICE_TYPE
,

14 
	mSLICE_PERMISSION
,

15 
	mSLICE_DESCRIPTION
,

16 
	mSLICE_PARENT
,

17 
	mSLICE_OID_SUFFIX
,

18 
	mSLICE_TYPE_MAXIMUM


19 } 
	g¶i˚Ty≥
;

21 
	sli°Node
 {

22 
li°Node
 *
	m√xt
;

23 
li°Node
 *
	m¥ev
;

24 } 
	tli°Node
;

26 
	s¶i˚
 {

27 
	m¶iKey
;

28 *
	m¶iVÆ
;

29 
li°Node
 
	m¶iNode
;

30 } 
	t¶i˚
;

32 
	#IS_VALID_SLICE_TYPE
(
Sli˚
Ë(Sli˚ > 
SLICE_TYPE_MINIMUM
 && Sli˚ < 
SLICE_TYPE_MAXIMUM
)

	)

35 (*
	tli°NodeTask
)(
	tli°Node
 *
	thód
, *
	t¨g
);

36 
li°Node
 *
	`li°NodePªv
÷i°Nodê*
node
);

37 
li°Node
 *
	`li°NodeNext
÷i°Nodê*
node
);

38 
li°Node
 *
	`li°NodeIn£π
÷i°Nodê*
hód
,Üi°Nodê*
node
);

39 
li°Node
 *
	`li°NodeDñëe
÷i°Nodê*
node
);

40 
li°Node
 *
	`li°NodeAµíd
÷i°Nodê*
li°H
,Üi°Nodê*
li°N
);

41 
boﬁ
 
	`li°NodeIsEm±y
(
li°Node
 *
node
);

42 
	`li°NodeTøvñ
(
li°Node
 *
hód
, 
li°NodeTask
 
func
, *
¨g
);

45 
¶i˚
 * 
	`¶i˚Next
(¶i˚ *
¶i
);

46 
¶i˚
 * 
	`¶i˚C⁄°ru˘
(
¶iKey
, *
¶iVÆ
);

47 
¶i˚
 * 
	`¶i˚Gë
(¶i˚ *
¶i
, 
¶iKey
);

48 
	`¶i˚St‹e
(
¶i˚
 *
¶i
, sli˚ *
√xt
);

49 
boﬁ
 
	`¶i˚Rñó£
(
¶i˚
 *
¶i
);

50 
boﬁ
 
	`¶i˚Re£t
(
¶i˚
 *
¶i
);

	@include/mibTreeGen.h

5 #i‚de‡
GL5610_MIB_DOC_GEN_TOKENOP_H


6 
	#GL5610_MIB_DOC_GEN_TOKENOP_H


	)

8 
	~"ty≥.h
"

9 
	~"li°.h
"

10 
	~"di•©chî.h
"

13 
	mSYMBOL_FOUND
,

14 
	mSYMBOL_NOT_FOUND


17 
	sèrgëSymbﬁLi°
 {

18 *
	msymbﬁName
;

22 
	m°©e
;

23 
li°Node
 
	mnode
;

24 } 
	tèrgëSymbﬁLi°
;

27 
mibObjGí
(
ty≥
);

28 
mibObjGí_Lóve
();

29 
mibObjGí_I¬îNode
();

30 
mibObjGí_å≠
();

31 
symbﬁCﬁÀ˘ög
(
ty≥
, 
di•©chP¨am
 *
∑øm
);

34 
	#PARAM_STORE_TO_SYM_LIST
(
ty≥
, 
∑øm
) ({\

35 *
°rög
; \

36 
°rög
 = (*)
	`disP¨amRërive
(&
∑øm
)->param; \

37 
	`¶i˚St‹e
(&
symCﬁÀ˘Sli˚
, 
	`¶i˚C⁄°ru˘
(
ty≥
, 
°rög
)); \

38 })

	)

	@include/mibTreeObjTree.h

5 #i‚de‡
GL5610_MIB_DOC_GEN_TREE_H


6 
	#GL5610_MIB_DOC_GEN_TREE_H


	)

8 
	smibNodeInfo
 {

9 *
	midít
;

10 *
	moid
;

11 } 
	tmibNodeInfo
;

13 
	smibInfo
 {

14 
mibNodeInfo
 *
	mnodeInfo
;

15 *
	mrw
;

16 *
	mty≥
;

17 *
	mdesc
;

18 *
	mdëaû
;

19 } 
	tmibLóveInfo
;

21 
	smibObje˘TªeNode
 {

22 
	misNode
;

23 *
	möfo
;

24 *
	midítifõr
;

25 
mibObje˘TªeNode
 *
	m∑ª¡
;

27 
mibObje˘TªeNode
 *
	mchûd
;

28 
mibObje˘TªeNode
 *
	msiblög
;

29 
mibObje˘TªeNode
 *
	mhód
;

30 } 
	tmibObje˘TªeNode
;

32 
mibObje˘TªeInô
(
mibObje˘TªeNode
 *
roŸ
);

33 
ö£π_MibTªe
(
mibObje˘TªeNode
 *
roŸ
, mibObje˘TªeNodê*
obj
, *
∑ª¡
);

34 
mibObje˘TªeNode
 * 
∑ª¡_MibTªe
(mibObje˘TªeNodê*
roŸ
, *
idít
);

35 
mibObje˘TªeNode
 * 
mibLóveBuûd
(*
idít
, *
ty≥
, *
rw
, *
desc
, *
oid
);

36 
mibObje˘TªeNode
 * 
mibNodeBuûd
(*
idít
, *
oid
);

37 
mibObje˘TªeNode
 * 
£¨ch_MibTªe
(mibObje˘TªeNodê*
roŸ
, *c⁄° 
idít
);

38 * 
gëIdítFromInfo
(
mibObje˘TªeNode
 *
node
);

39 * 
gëOidFromInfo
(
mibObje˘TªeNode
 *
node
);

40 
showTªe
(
mibObje˘TªeNode
 *
roŸ
);

41 
mibObje˘TªeNode
 * 
åavñ_MibTªe
(mibObje˘TªeNodê*
obj
, (*
func
)(*
¨gu
, mibObje˘TªeNodê*
node
), *
¨g
);

	@include/options.h

1 #i‚de‡
_OPTIONS_H_


2 
	#_OPTIONS_H


	)

4 
	~"li°.h
"

6 
	söcP©hLi°
 {

7 *
	m∑th
;

8 
li°Node
 
	mnode
;

9 } 
	töcP©hLi°
;

11 
	s›ti⁄s
 {

12 
öcP©hLi°
 
	mö˛udeP©h
;

13 *
	msour˚MibFûeP©h
;

14 *
	mèrgëPdfPATH
;

15 
	mf⁄tSize
;

16 } 
	t›ti⁄s_t
;

18 
›ti⁄sInô
(
¨gc
, *
¨gv
[]);

19 c⁄° * 
gëO±i⁄_Sour˚MibFûeP©h
();

20 c⁄° * 
gëO±i⁄_èrgëPdfP©h
();

21 c⁄° * 
gëO±i⁄_ö˛udeP©h
(*
ödex
);

	@include/queue.h

5 
	~"../ö˛ude/docGíî©e.h
"

7 #i‚de‡
GL5610_MIB_DOC_GEN_QUEUE_H


8 
	#GL5610_MIB_DOC_GEN_QUEUE_H


	)

10 
	#SIZE_OF_QUEUE
 512

	)

12 
	smibNodeInfoQueue
 {

13 
	mhód
;

14 
	mèû
;

15 
	mcou¡
;

16 
èbÀInfo
 *
	mèbÀBuf„r
[
SIZE_OF_QUEUE
];

17 } 
	tmibNodeInfoQueue
;

19 
≠≥ndQueue
(
mibNodeInfoQueue
 *
q
, 
èbÀInfo
 *
f
);

20 
èbÀInfo
 *
gëQueue
(
mibNodeInfoQueue
 *
q
);

	@include/stack.h

5 #i‚de‡
GL5610_MIB_DOC_GEN_STACK_H


6 
	#GL5610_MIB_DOC_GEN_STACK_H


	)

8 
	#IS_STACK_EMPTY
(
S
Ë((S)->
t›
 < 0)

	)

9 
	#IS_STACK_FULL
(
S
Ë((S)->
t›
 >
SIZE_OF_IDENT_STACK
-1)

	)

18 
	#pushByIndex
(
STACK_BASE
, 
ELEMENT
, 
TOP
, 
MAX
, 
UNIT_SIZE
) ({\

19 
ªt
;\

20 i‡(
TOP
 >
MAX
 || TOP+
UNIT_SIZE
 >= MAX) {\

22 
ªt
 = 0;\

24 
TOP
 +
UNIT_SIZE
;\

25 
	`mem˝y
(
STACK_BASE
 - 
TOP
, 
ELEMENT
, 
UNIT_SIZE
); \

26 
ªt
 = 1;\

28 
ªt
;\

29 })

	)

36 
	#p›ByIndex
(
STACK_BASE
, 
TOP
, 
UNIT
, 
UNIT_SIZE
) ({\

37 
ªt
;\

38 i‡(
TOP
 <= 0) {\

39 
ªt
 = 0;\

41 
	`mem˝y
(
UNIT
, 
STACK_BASE
 + 
TOP
, 
UNIT_SIZE
);\

42 
TOP
 -
UNIT_SIZE
;\

43 
ªt
 = 1;\

45 
ªt
;\

46 })

	)

52 
	sidítSèck
 {

53 
	mt›
;

54 
	mbuf„rSize
;

55 
	munôSize
;

56 *
	mba£
;

57 *
	mbuf„r
;

58 } 
	tgíîicSèck
;

60 
gíîicSèckC⁄°ru˘
();

61 
push
(
gíîicSèck
 *
ps
, *
unô
);

62 
p›
(
gíîicSèck
 *
ps
, *
unô
);

	@include/symbolTbl.h

1 #i‚de‡
_SYMBOLTBL_H_


2 
	#_SYMBOLTBL_H_


	)

4 
	~"ty≥.h
"

5 
	~"li°.h
"

7 
	#MAX_CHAR_OF_MOD_IDENT
 (64)

	)

9 
	snodeMëa_t
 {

10 *
	mnodeIdít
;

11 *
	m∑ª¡Idít
;

12 *
	msuffix
;

13 } 
	tnodeMëa_t
;

15 
	sÀaveMëa_t
 {

16 *
	midít
;

17 *
	m∑ª¡
;

18 *
	msuffix
;

19 *
	mty≥
;

20 *
	m≥rmissi⁄
;

21 } 
	tÀaveMëa_t
;

23 
	esymEº‹Code
 {

24 
	mSYM_TABLE_EXISTS
,

25 
	mSYM_TABLE_NOT_FOUND
,

26 
	mSYM_EXISTS
,

27 
	mSYM_NOT_FOUND


28 } 
	tsymEº‹Code
;

30 
symEº‹Code
 
symTblEº‹
;

32 
	esymbﬁTy≥
 {

33 
	mSYMBOL_TYPE_NODE
,

34 
	mSYMBOL_TYPE_LEAVE


35 } 
	tsymbﬁTy≥
;

37 
	ssymbﬁ_t
 {

38 
symbﬁTy≥
 
	msymTy≥
;

39 *
	msymIdít
;

41 
ÀaveMëa_t
 
	mÀaveMëa
;

42 
nodeMëa_t
 
	mnodeMëa
;

43 } 
	msymInfo
;

44 
li°Node
 
	msymNode
;

45 } 
	tsymbﬁ_t
;

47 
	ssymbﬁTabÀ
 {

48 *
	mmodName
;

49 
symbﬁ_t
 *
	msymbﬁ
;

50 
li°Node
 
	msymTblNode
;

51 } 
	tsymbﬁTabÀ
;

54 
symbﬁTabÀ
 * 
symbﬁTabÀC⁄°ru˘
(*
«me
);

55 
symbﬁTabÀ
 * 
symbﬁTabÀPªv
(symbﬁTabÀ *
tbl
);

56 
symbﬁTabÀ
 * 
symbﬁTabÀNext
(symbﬁTabÀ *
tbl
);

57 
symbﬁTabÀ
 * 
symbﬁTabÀSórch
(symbﬁTabÀ *
tblRoŸ
, *
modName
);

58 
symbﬁTabÀ
 * 
symbﬁModuÀAdd
(symbﬁTabÀ *
tblRoŸ
, symbﬁTabÀ *
√wTbl
);

59 
symbﬁ_t
 * 
symbﬁPªv
(symbﬁ_à*
sym
);

60 
symbﬁ_t
 * 
symbﬁNext
(symbﬁ_à*
sym
);

61 
symbﬁ_t
 * 
symbﬁAdd
(
symbﬁTabÀ
 *
symTbl
, symbﬁ_à*
√wSym
, *
modName
);

62 
symbﬁ_t
 *
symbﬁTøvñ
(
symbﬁTabÀ
 *
symbﬁTblRoŸ
, (*
func
)(symbﬁ_à*
sym
, *
¨g
), *arg);

63 
	`symbﬁSórchögByP¨ít
(
symbﬁTabÀ
 *
symTblRoŸ
, *
∑ª¡
, 
symbﬁ_t
 *
sym
);

64 
	`symbﬁSórchög
(
symbﬁTabÀ
 *
symTblRoŸ
, *
sym
);

	@include/type.h

5 #i‚de‡
_MIB2DOC_TYPE_H_


6 
	#_MIB2DOC_TYPE_H_


	)

8 
	~<°ddef.h
>

9 
	~<°dboﬁ.h
>

10 
	~"mibTªeObjTªe.h
"

11 
	~"Àxî.h
"

14 #i‚de‡
FALSE


15 
	#FALSE
 
Ál£


	)

17 #i‚de‡
TRUE


18 
	#TRUE
 
åue


	)

21 
	#cS∑˚
 ' '

	)

22 
	#nuŒ
 (0)

	)

23 
	#SIZE_OF_CURRENT_TABLE
 64

	)

24 
	#SIZE_OF_SECTION_RECORD
 1024

	)

25 
	#SIZE_OF_OID_STRING
 256

	)

26 
	#isNuŒPå
(
PTR
Ë(PTR ? 
Ál£
 : 
åue
)

	)

27 
	#RELEASE_MEM
(
PTR
Ë({
	`‰ì
(PTR); PTR=
NULL
;})

	)

28 
	#c⁄èöîOf
(
±r
, 
C⁄Ty≥
, 
membî
) ({\

29 c⁄° 
	`ty≥of
–((
C⁄Ty≥
 *)(0))->
membî
Ë*
__m±r
 = 
±r
;\

30 (
C⁄Ty≥
 *)((*)
__m±r
 - 
	`off£tof
(C⁄Ty≥, 
membî
));\

31 })

	)

33 
	eunôTy≥
 {

34 
	mOBJECT
 = 1,

35 
	mTRAP
,

36 
	mOBJECT_IDENTIFIER
,

37 
	mSEQUENCE
,

38 
	mSMI_DEF


39 } 
	tunôTy≥
;

41 
	eîr‹Ty≥
 {

42 
	mERROR_NONE
,

43 
	mERROR_GENERIC
,

44 
	mERROR_NULL_REF
,

45 
	mERROR_WRONG_IDX
,

46 
	mERROR_OPEN_FAILED
,

47 
	mABORT


48 } 
	tîr‹Ty≥
;

50 
mib2docEº‹
;

	@include/util.h

1 #i‚de‡
_UTIL_H_


2 
	#_UTIL_H


	)

4 
	~"di•©chî.h
"

6 
°rögToIdítLi°
(*
°r
, 
idítLi°
 *
li°
, 
£≥øt‹
);

7 
èbÀRecognize
(*
buf„r
, 
size
);

8 
íåyRecognize
(*
buf„r
, 
size
);

	@include/yy_syn.tab.h

33 #i‚de‡
YY_YY_HOME_AYDENLIN_PROJECTS_MIB2DOC_SRC_YY_SYN_TAB_H_INCLUDED


34 
	#YY_YY_HOME_AYDENLIN_PROJECTS_MIB2DOC_SRC_YY_SYN_TAB_H_INCLUDED


	)

36 #i‚de‡
YYDEBUG


37 
	#YYDEBUG
 0

	)

39 #i‡
YYDEBUG


40 
yydebug
;

44 #i‚de‡
YYTOKENTYPE


45 
	#YYTOKENTYPE


	)

46 
	eyytokíty≥


48 
	mIDENTIFIER
 = 258,

49 
	mOBJ_SPECIFIER
 = 259,

50 
	mSYNTAX_SPECIFIER
 = 260,

51 
	mACCESS_SPECIFIER
 = 261,

52 
	mACCESS_VALUE
 = 262,

53 
	mSTATUS_SPECIFIER
 = 263,

54 
	mSTATUS_VALUE
 = 264,

55 
	mDESC_SPECIFIER
 = 265,

56 
	mDESC_VALUE
 = 266,

57 
	mMOUNT_POINT
 = 267,

58 
	mASSIGNED
 = 268,

59 
	mBEGIN_
 = 269,

60 
	mEND_
 = 270,

61 
	mDEF
 = 271,

62 
	mSEQ
 = 272,

63 
	mCOMMA
 = 273,

64 
	mSEMICOLON
 = 274,

65 
	mINDEX_
 = 275,

66 
	mTRAP_SPECIFIER
 = 276,

67 
	mOBJ_IDEN_
 = 277,

68 
	mL_BRACE
 = 278,

69 
	mR_BRACE
 = 279,

70 
	mOBJECTS_
 = 280,

71 
	mTYPE
 = 281,

72 
	mNUM
 = 282,

73 
	mFROM_
 = 283,

74 
	mIMPORTS_
 = 284

79 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


80 * 
	tYYSTYPE
;

81 
	#YYSTYPE_IS_TRIVIAL
 1

	)

82 
	#YYSTYPE_IS_DECLARED
 1

	)

86 
YYSTYPE
 
yylvÆ
;

88 
yy∑r£
 ();

	@src/dispatcher.c

3 
	~"ty≥.h
"

4 
	~"°ack.h
"

5 
	~"di•©chî.h
"

6 
	~"mibTªeGí.h
"

7 
	~<°dlib.h
>

8 
	~<li°.h
>

9 
	~<›ti⁄s.h
>

10 
	~<utû.h
>

13 
debuggög
(
di•©chP¨am
 *
∑øm
);

14 
di•©chMakeChoi˚
(
di•©ch_ty≥
 
dTy≥
);

15 
ÀxBuf„rSwôchög
(*
√wModuÀ
);

16 
swôchToModuÀ
(
di•©chP¨am
 *
∑øm
);

17 
cﬁÀ˘InfoInô
(*
modName
, *
sSåög
, 
cﬁÀ˘Info
 *
cInfo
);

18 
swôchInô
();

20 
¶i˚
 
¶i˚C⁄èöî
;

21 
di•©ch_mode
 
	gdi•©chMode
;

22 
	gisNìdSwôchInô
 = 
TRUE
;

23 
swôchögSèã
 
	gswSèã
;

26 
	$di•©chInô
() {

27 
	`swôchInô
();

28 
di•©chMode
 = 
DISPATCH_MODE_DOC_GENERATING
;

29  
ERROR_NONE
;

30 
	}
}

32 
	$di•©ch
(
di•©ch_ty≥
 
disTy≥
, 
di•©chP¨am
 *
∑øm
) {

33 
key
;

34 *
vÆ
;

35 
îr‹Ty≥
 
ªt
 = 
ERROR_NONE
;

37 i‡(
	`isNuŒPå
(
∑øm
)) {

38  
ERROR_NULL_REF
;

41 
	`di•©chMakeChoi˚
(
disTy≥
)) {

42 
DISPATCH_PARAM_STAGE
:

43 
key
 = ()
	`disP¨amRërive
(&
∑øm
)->param;

44 
vÆ
 = (*)
	`disP¨amRërive
(&
∑øm
)->param;

45 
	`¶i˚St‹e
(&
¶i˚C⁄èöî
, 
	`¶i˚C⁄°ru˘
(
key
, 
vÆ
));

47 
MIBTREE_GENERATION
:

48 
	`mibObjGí
(()
	`disP¨amRërive
(&
∑øm
)->param);

50 
SYMBOL_COLLECTING
:

51 
	`symbﬁCﬁÀ˘ög
(()
	`disP¨amRërive
(&
∑øm
)->param,Öaram);

53 
SWITCH_TO_INC_BUFFER
:

54 
ªt
 = 
	`swôchToModuÀ
(
∑øm
);

56 
IGNORE
:

59 
DEBUGING
:

60 
	`debuggög
(
∑øm
);

62 
ªt
 = 
ERROR_WRONG_IDX
;

64  
ªt
;

65 
	}
}

67 
	$debuggög
(
di•©chP¨am
 *
∑øm
) {

68 
di•©chP¨am
 *
ªsu…
;

69 
key
;

70 *
vÆ
;

72 
ªsu…
 = 
	`disP¨amRërive
(&
∑øm
);

73 i‡(
ªsu…
 =
NULL
)

75 
key
 = ()
ªsu…
->
∑øm
;

76 i‡(
key
 == 1)

77 
key
 = 1;

78 
ªsu…
 = 
	`disP¨amRërive
(&
∑øm
);

79 i‡(
ªsu…
 =
NULL
)

81 
vÆ
 = (*)
ªsu…
->
∑øm
;

83 i‡(
	`IS_VALID_SLICE_TYPE
(
key
)) {

84 
	`¥ötf
("DEBUGGING\n");

85 
	`¥ötf
("Key:vÆuêPaú i†%lu:%s\n", 
key
, 
vÆ
);

87 
	}
}

89 
	$di•©chMakeChoi˚
(
di•©ch_ty≥
 
dTy≥
) {

90 
choi˚
 = -1;

92 i‡(
di•©chMode
 =
DISPATCH_MODE_DOC_GENERATING
) {

93 
choi˚
 = 
dTy≥
;

94 } i‡(
di•©chMode
 =
DISPATCH_MODE_SYMBOL_COLLECTING
) {

95 i‡(
dTy≥
 =
DISPATCH_PARAM_STAGE
 || dTy≥ =
MIBTREE_GENERATION
) {

96 
choi˚
 = 
SYMBOL_COLLECTING
;

99 
choi˚
 = 
dTy≥
;

102 i‡(
di•©chMode
 =
DISPATCH_MODE_DEBUG
)

103 
choi˚
 = 
DEBUGING
;

105  
choi˚
;

106 
	}
}

109 
	$swôchInô
() {

110 
ªtVÆ
;

112 
swSèã
.
°©e
 = 
DISPATCH_MODE_DOC_GENERATING
;

113 
swSèã
.
cou¡î
 = 0;

115 
	`mem£t
(
	`SW_CUR_BUFFER_INFO_REF
(
swSèã
), 0, (
YY_BUFFER_STATE
));

116 
	`mem£t
(
	`SW_CUR_IMPORT_REF
(
swSèã
), 0, (
cﬁÀ˘Info
));

117 
	`gíîicSèckC⁄°ru˘
(&
swSèã
.
swSèck
, 128 * (
swôchInfo
), (switchInfo));

119 
isNìdSwôchInô
 = 
FALSE
;

120  
ªtVÆ
;

121 
	}
}

123 
	$swôchToModuÀ
(
di•©chP¨am
 *
∑øm
) {

124 *
moduÀName
;

125 *
sCﬁÀ˘i⁄
;

126 
cﬁÀ˘Info
 *
cInfo
;

128 i‡(
	`isNuŒPå
(
∑øm
)) {

129  
nuŒ
;

132 
moduÀName
 = (*)
	`disP¨amRërive
(&
∑øm
)->param;

133 
sCﬁÀ˘i⁄
 = (*)
	`disP¨amRërive
(&
∑øm
)->param;

136 
	`pushByIndex
(
	`SW_STACK_BASE
(
swSèã
), 
	`SW_CUR_BUFFER_INFO_REF
(swState),

137 
	`SW_STACK_TOP
(
swSèã
), 
	`SW_STACK_BUFFER_SIZE
(swSèã), 
	`SW_STACK_UNIT_SIZE
(swState));

140 i‡(
	`ÀxBuf„rSwôchög
(
moduÀName
Ë=
ERROR_GENERIC
)

142  
ABORT
;

143 
	`mem˝y
(
	`SW_CUR_BUFFER_INFO_REF
(
swSèã
), 
	`gëCuºítBuf„rSèã
(), (
YY_BUFFER_STATE
));

146 
	}
}

148 
	$ÀxBuf„rSwôchög
(*
√wModuÀ
) {

149 
ödex
 = 0;

150 c⁄° *
∑th
;

151 *
èrgëModuÀP©h
;

153 
∑th
 = 
	`gëO±i⁄_ö˛udeP©h
(&
ödex
)) {

154 
èrgëModuÀP©h
 = (*)
	`mÆloc
(
	`°æí
(
∑th
)+°æí(
√wModuÀ
)+1);

155 
	`°∫˝y
(
èrgëModuÀP©h
, 
∑th
, 
	`°æí
(path));

156 
	`°∫ˇt
(
èrgëModuÀP©h
, 
√wModuÀ
, 
	`°æí
(newModule));

158 
yyö
 = 
	`f›í
(
èrgëModuÀP©h
, "r");

159 i‡(!
yyö
) {

162 
	`yy_swôch_to_buf„r
(
	`yy_¸óã_buf„r
(
yyö
, 
YY_BUF_SIZE
));

164 i‡(
∑th
 =
nuŒ
) {

165  
ERROR_GENERIC
;

167  
ERROR_NONE
;

168 
	}
}

170 * 
	$swôch_CuºítMod
(*
modName
, 
Àn
) {

171  
	`SW_CUR_IMPORT
(
swSèã
).
modName
;

172 
	}
}

177 
	#SYMBOL_SEPERATOR
 ','

	)

179 
	$cﬁÀ˘InfoInô
(*
modName
, *
sSåög
, 
cﬁÀ˘Info
 *
cInfo
) {

180 
idítLi°
 *
hód
;

182 i‡(
	`isNuŒPå
(
modName
Ë|| isNuŒPå(
sSåög
Ë|| isNuŒPå(
cInfo
))

185 
hód
 = (
idítLi°
 *)
	`mÆloc
((identList));

186 
	`°rögToIdítLi°
(
sSåög
, 
hód
, 
SYMBOL_SEPERATOR
);

188 
cInfo
->
modName
 = modName;

189 
cInfo
->
symbﬁs
 = 
hód
;

192 
	}
}

194 
	$rmSymFromIdítLi°
(
idítLi°
 *
li°Hód
, *
symbﬁIdít
) {

195 
idítLi°
 *
li°Pro˚ssög
;

197 i‡(
	`isNuŒPå
(
li°Hód
)) {

198  
ERROR_NULL_REF
;

201 
li°Pro˚ssög
 = 
li°Hód
;

203 
li°Hód
) {

204 i‡(!
	`°∫cmp
(
li°Pro˚ssög
->
symName
, 
symbﬁIdít
, 
	`°æí
(symbolIdent))) {

206 
	`li°NodeDñëe
(&
li°Pro˚ssög
->
node
);

207 i‡(
li°Pro˚ssög
 =
li°Hód
 &&Üi°Hód->
node
.
√xt
 !
NULL
) {

208 
	`SW_CUR_IMPORT
(
swSèã
).
symbﬁs
 = 
	`c⁄èöîOf
(
li°Hód
->
node
.
√xt
, 
idítLi°
,Çode);

210 
	`RELEASE_MEM
(
li°Pro˚ssög
->
symName
);

211 
	`RELEASE_MEM
(
li°Pro˚ssög
);

214 
li°Hód
 = 
	`c⁄èöîOf
÷i°Hód->
node
.
√xt
, 
idítLi°
,Çode);

216  
ERROR_NONE
;

217 
	}
}

	@src/docGenerate.c

5 
	~<°dio.h
>

6 
	~<mem‹y.h
>

7 
	~<°dlib.h
>

8 
	~"mibTªeObjTªe.h
"

9 
	~"docGíî©e.h
"

10 
	~"queue.h
"

11 
	~"utû.h
"

14 
	#SIZE_OF_LATEX_BUFFER
 256

	)

17 *
	gbegöFrom
;

18 
	gbegöOid
;

19 
	gisInôûized
;

22 
	mTABLE
 = 1,

23 
	mCOLLECTING
,

24 
	mSECTION


26 
mibObje˘TªeNode
 
mibObje˘TªeRoŸ
;

29 *
	gœTexSåBuf„r
;

30 
mibNodeInfoQueue
 
	göfoQueue
;

31 
makeDecisi⁄
(
mibObje˘TªeNode
 *
node
);

32 
£˘i⁄Gí_L©ex
(*
£cName
, *
OID
, 
FILE
 *
wrôeTo
);

33 
èbÀGí_L©ex
(
mibNodeInfoQueue
 *
öfo
, *
∑ª¡
, 
FILE
 *
wrôeTo
);

34 * 
èbÀIãmGí_L©ex
(
èbÀInfo
 *
öfo
, 
ödex
);

35 
öfoPackë
(
èbÀInfo
 *
öfo
, 
mibObje˘TªeNode
 *
node
);

36 *
l⁄g2Sh‹t
(*
°r
);

37 
œãxHódîGí
();

38 
œãxTaûGí
();

39 
documítGí
(
mibObje˘TªeNode
 *
roŸ
, 
FILE
 *
wrôeTo
);

40 
docGíî©e
(*
¨g
, 
mibObje˘TªeNode
 *
roŸ
);

42 
	$documítGí
(
mibObje˘TªeNode
 *
roŸ
, 
FILE
 *
wrôeTo
) {

43 
	`œãxHódîGí
();

44 
	`åavñ_MibTªe
(
roŸ
, 
docGíî©e
, 
wrôeTo
);

45 
	`œãxTaûGí
();

48 
	}
}

50 
	$docGíî©e
(*
¨g
, 
mibObje˘TªeNode
 *
node
) {

51 
FILE
 *
wrôeTo
;

52 *
£˙ame
, *
oid
, *
∑ª¡
;

53 
èbÀInfo
 *
öfo
;

54 
mibObje˘TªeNode
 *
pNode
;

55 
mibNodeInfoQueue
 *
pQueue
 = &
öfoQueue
;

57 i‡(!
begöFrom
)

60 
wrôeTo
 = (
FILE
 *Ë
¨g
;

61 
pNode
 = 
	`£¨ch_MibTªe
(&
mibObje˘TªeRoŸ
, 
begöFrom
);

62 i‡(
	`isNuŒPå
(
pNode
))

64 
begöOid
 = 
	`°æí
(
	`gëOidFromInfo
(
pNode
));

65 
œTexSåBuf„r
 = (*Ë
	`mÆloc
(
SIZE_OF_LATEX_BUFFER
);

67 
	`makeDecisi⁄
(
node
)) {

68 
TABLE
:

69 
öfo
 = (
èbÀInfo
 *)
	`mÆloc
((tableInfo));

70 
	`öfoPackë
(
öfo
, 
node
);

71 
∑ª¡
 = 
	`gëIdítFromInfo
(
node
->parent);

74 i‡(
	`íåyRecognize
(
∑ª¡
, 
	`°æí
(parent)))

75 
∑ª¡
 = 
	`gëIdítFromInfo
(
node
->parent->parent);

76 
	`≠≥ndQueue
(&
öfoQueue
, 
öfo
);

77 
	`èbÀGí_L©ex
(&
öfoQueue
, 
∑ª¡
, 
wrôeTo
);

79 
COLLECTING
:

80 
öfo
 = (
èbÀInfo
 *)
	`mÆloc
((tableInfo));

81 
	`öfoPackë
(
öfo
, 
node
);

82 
	`≠≥ndQueue
(&
öfoQueue
, 
öfo
);

84 
SECTION
:

85 
£˙ame
 = 
	`gëIdítFromInfo
(
node
);

86 
oid
 = 
	`gëOidFromInfo
(
node
);

87 
	`£˘i⁄Gí_L©ex
(
£˙ame
, 
oid
, 
wrôeTo
);

94 
	}
}

97 
	$œãxHódîGí
(Ë{
	}
}

100 
	$œãxTaûGí
(Ë{
	}
}

102 
	$makeDecisi⁄
(
mibObje˘TªeNode
 *
node
) {

103 
decisi⁄
;

104 *
idít
 = 
	`gëIdítFromInfo
(
node
);

106 i‡(
node
->
isNode
 || 
	`èbÀRecognize
(
idít
, 
	`°æí
(ident))) {

107 
decisi⁄
 = 
SECTION
;

108 } i‡(
node
->
siblög
 !
NULL
 || 
	`íåyRecognize
(
idít
, 
	`°æí
(ident))) {

109 
decisi⁄
 = 
COLLECTING
;

111 
decisi⁄
 = 
TABLE
;

113  
decisi⁄
;

114 
	}
}

116 
	$öfoPackë
(
èbÀInfo
 *
öfo
, 
mibObje˘TªeNode
 *
node
) {

117 
öfo
->
idítifõr
 = 
	`gëIdítFromInfo
(
node
);

118 
öfo
->
oid
 = 
	`gëOidFromInfo
(
node
);

120 i‡(
node
->
isNode
)

123 
öfo
->
desc
 = ((
mibLóveInfo
 *)(
node
->info))->desc;

124 
öfo
->
ty≥
 = 
	`l⁄g2Sh‹t
(((
mibLóveInfo
 *)(
node
->info))->type);

125 
öfo
->
rw
 = ((
mibLóveInfo
 *)(
node
->info))->rw;

128 
	}
}

130 
	$£˘i⁄Gí_L©ex
(*
£cName
, *
OID
, 
FILE
 *
wrôeTo
) {

132 
£˘i⁄
 = 1,

133 
sub£˘i⁄
 = 2,

134 
subsub£˘i⁄
 = 3,

135 
∑øgøph
 = 4,

136 
sub∑øgøph
 = 5

139 
dïth
;

140 *
¥efix
;

142 
dïth
 = (
	`°æí
(
OID
Ë- 
begöOid
) / 2 + 1;

144 
dïth
) {

145 
£˘i⁄
:

146 
¥efix
 = "section";

148 
sub£˘i⁄
:

149 
¥efix
 = "subsection";

151 
subsub£˘i⁄
:

152 
¥efix
 = "subsubsection";

154 
∑øgøph
:

155 
¥efix
 = "paragraph";

157 
sub∑øgøph
:

158 
¥efix
 = "subparagraph";

161 
¥efix
 = "subparagraph";

164 
	`Ârötf
(
wrôeTo
, "\\%†{%†(%s)}.\n", 
¥efix
, 
£cName
, 
OID
);

166 
	}
}

168 
	$èbÀGí_L©ex
(
mibNodeInfoQueue
 *
queue
, *
∑ª¡
, 
FILE
 *
wrôeTo
) {

169 
i
, 
cou¡
, 
ödex
;

171 i‡(
	`isNuŒPå
(
queue
Ë|| isNuŒPå(
wrôeTo
))

174 
cou¡
 = 
queue
->count;

175 
ödex
 = 1;

177 
	`Ârötf
(
wrôeTo
, "\\begin{table}[H]\n"

184 
i
=0; i<
cou¡
; i++, 
ödex
++) {

185 
	`Ârötf
(
wrôeTo
, "%†\\\\\n", 
	`èbÀIãmGí_L©ex
((
èbÀInfo
 *)
	`gëQueue
(
queue
), 
ödex
));

186 
	`Ârötf
(
wrôeTo
, "\\hline\n");

189 
	`Ârötf
(
wrôeTo
, "\\end{tabular}\n");

190 
	`Ârötf
(
wrôeTo
, "}\n");

191 
	`Ârötf
(
wrôeTo
, "\\ˇ±i⁄{%s}\n", 
∑ª¡
);

192 
	`Ârötf
(
wrôeTo
, "\\end{table}\n");

194 
∑ª¡
 = 
NULL
;

196 
	}
}

198 * 
	$èbÀIãmGí_L©ex
(
èbÀInfo
 *
öfo
, 
ödex
) {

200 i‡(
	`isNuŒPå
(
öfo
))

201  
NULL
;

203 
	`mem£t
(
œTexSåBuf„r
, 0, 
SIZE_OF_LATEX_BUFFER
);

204 
	`•rötf
(
œTexSåBuf„r
, "%d & %s & %s & %s & %s & %s & %s",

205 
ödex
, 
öfo
->
idítifõr
, info->
desc
, info->
oid
, info->
rw
, info->
ty≥
, " ");

207  
œTexSåBuf„r
;

208 
	}
}

210 * 
	$l⁄g2Sh‹t
(*
°r
) {

211 i‡(
	`isNuŒPå
(
°r
))

212  
NULL
;

214 i‡(
	`°∫cmp
(
°r
, "INTEGER", 
	`°æí
("INTEGER")) == 0) {

218 i‡(
	`°∫cmp
(
°r
, "OCTET", 
	`°æí
("OCTET")) == 0) {

222 i‡(
	`íåyRecognize
(
°r
, 
	`°æí
(str))) {

226  
°r
;

227 
	}
}

	@src/lexDeal.c

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

7 
	~"ÀxDól.h
"

8 
	~"ty≥.h
"

10 * 
	$°rDu∂iˇã
(*
§c
) {

11 
size_t
 
size
;

12 *
d°
;

14 i‡(
	`isNuŒPå
(
§c
))

15  
NULL
;

17 
size
 = 
	`°æí
(
§c
)+1;

18 
d°
 = (*)
	`mÆloc
(
size
);

19 
	`mem£t
(
d°
, 0, 
size
);

20 
	`°∫˝y
(
d°
, 
§c
, 
size
);

22  
d°
;

23 
	}
}

	@src/lexer.c

5 
	#YY_INT_ALIGNED
 

	)

9 
	#FLEX_SCANNER


	)

10 
	#YY_FLEX_MAJOR_VERSION
 2

	)

11 
	#YY_FLEX_MINOR_VERSION
 6

	)

12 
	#YY_FLEX_SUBMINOR_VERSION
 4

	)

13 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

14 
	#FLEX_BETA


	)

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<î∫o.h
>

23 
	~<°dlib.h
>

29 #i‚de‡
FLEXINT_H


30 
	#FLEXINT_H


	)

34 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

39 #i‚de‡
__STDC_LIMIT_MACROS


40 
	#__STDC_LIMIT_MACROS
 1

	)

43 
	~<öây≥s.h
>

44 
öt8_t
 
	tÊex_öt8_t
;

45 
uöt8_t
 
	tÊex_uöt8_t
;

46 
öt16_t
 
	tÊex_öt16_t
;

47 
uöt16_t
 
	tÊex_uöt16_t
;

48 
öt32_t
 
	tÊex_öt32_t
;

49 
uöt32_t
 
	tÊex_uöt32_t
;

51 sig√d 
	tÊex_öt8_t
;

52 
	tÊex_öt16_t
;

53 
	tÊex_öt32_t
;

54 
	tÊex_uöt8_t
;

55 
	tÊex_uöt16_t
;

56 
	tÊex_uöt32_t
;

59 #i‚de‡
INT8_MIN


60 
	#INT8_MIN
 (-128)

	)

62 #i‚de‡
INT16_MIN


63 
	#INT16_MIN
 (-32767-1)

	)

65 #i‚de‡
INT32_MIN


66 
	#INT32_MIN
 (-2147483647-1)

	)

68 #i‚de‡
INT8_MAX


69 
	#INT8_MAX
 (127)

	)

71 #i‚de‡
INT16_MAX


72 
	#INT16_MAX
 (32767)

	)

74 #i‚de‡
INT32_MAX


75 
	#INT32_MAX
 (2147483647)

	)

77 #i‚de‡
UINT8_MAX


78 
	#UINT8_MAX
 (255U)

	)

80 #i‚de‡
UINT16_MAX


81 
	#UINT16_MAX
 (65535U)

	)

83 #i‚de‡
UINT32_MAX


84 
	#UINT32_MAX
 (4294967295U)

	)

87 #i‚de‡
SIZE_MAX


88 
	#SIZE_MAX
 (~(
size_t
)0)

	)

98 
	#yyc⁄°
 c⁄°

	)

100 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 3

101 
	#yyn‹ëu∫
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

103 
	#yyn‹ëu∫


	)

107 
	#YY_NULL
 0

	)

112 
	#YY_SC_TO_UI
(
c
Ë((
YY_CHAR
Ë(c))

	)

118 
	#BEGIN
 (
yy_°¨t
Ë1 + 2 *

	)

123 
	#YY_START
 (((
yy_°¨t
Ë- 1Ë/ 2)

	)

124 
	#YYSTATE
 
YY_START


	)

126 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

128 
	#YY_NEW_FILE
 
	`yyª°¨t
–
yyö
 )

	)

129 
	#YY_END_OF_BUFFER_CHAR
 0

	)

132 #i‚de‡
YY_BUF_SIZE


133 #ifde‡
__ü64__


138 
	#YY_BUF_SIZE
 32768

	)

140 
	#YY_BUF_SIZE
 16384

	)

146 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

148 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


149 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

150 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

153 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


154 
	#YY_TYPEDEF_YY_SIZE_T


	)

155 
size_t
 
	tyy_size_t
;

158 
yyÀng
;

160 
FILE
 *
yyö
, *
yyout
;

162 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

163 
	#EOB_ACT_END_OF_FILE
 1

	)

164 
	#EOB_ACT_LAST_MATCH
 2

	)

166 
	#YY_LESS_LINENO
(
n
)

	)

167 
	#YY_LINENO_REWIND_TO
(
±r
)

	)

170 
	#yyÀss
(
n
) \

174 
yyÀss_ma¸o_¨g
 = (
n
); \

175 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

176 *
yy_˝
 = (
yy_hﬁd_ch¨
); \

177 
YY_RESTORE_YY_MORE_OFFSET
 \

178 (
yy_c_buf_p
Ë
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

179 
YY_DO_BEFORE_ACTION
; \

181  0 )

	)

182 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, (
yyãxt_±r
Ë)

	)

184 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


185 
	#YY_STRUCT_YY_BUFFER_STATE


	)

186 
	syy_buf„r_°©e


188 
FILE
 *
	myy_öput_fûe
;

190 *
	myy_ch_buf
;

191 *
	myy_buf_pos
;

196 
	myy_buf_size
;

201 
	myy_n_ch¨s
;

207 
	myy_is_our_buf„r
;

214 
	myy_is_öãø˘ive
;

220 
	myy_©_bﬁ
;

222 
	myy_bs_löío
;

223 
	myy_bs_cﬁumn
;

228 
	myy_fûl_buf„r
;

230 
	myy_buf„r_°©us
;

232 
	#YY_BUFFER_NEW
 0

	)

233 
	#YY_BUFFER_NORMAL
 1

	)

244 
	#YY_BUFFER_EOF_PENDING
 2

	)

250 
size_t
 
	gyy_buf„r_°ack_t›
 = 0;

251 
size_t
 
	gyy_buf„r_°ack_max
 = 0;

252 
YY_BUFFER_STATE
 * 
	gyy_buf„r_°ack
 = 
NULL
;

260 
	#YY_CURRENT_BUFFER
 ( (
yy_buf„r_°ack
) \

261 ? (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)] \

262 : 
NULL
)

	)

266 
	#YY_CURRENT_BUFFER_LVALUE
 (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)]

	)

269 
	gyy_hﬁd_ch¨
;

270 
	gyy_n_ch¨s
;

271 
	gyyÀng
;

274 *
	gyy_c_buf_p
 = 
NULL
;

275 
	gyy_öô
 = 0;

276 
	gyy_°¨t
 = 0;

281 
	gyy_did_buf„r_swôch_⁄_eof
;

283 
yyª°¨t
 ( 
FILE
 *
öput_fûe
 );

284 
yy_swôch_to_buf„r
 ( 
YY_BUFFER_STATE
 
√w_buf„r
 );

285 
YY_BUFFER_STATE
 
yy_¸óã_buf„r
 ( 
FILE
 *
fûe
, 
size
 );

286 
yy_dñëe_buf„r
 ( 
YY_BUFFER_STATE
 
b
 );

287 
yy_Êush_buf„r
 ( 
YY_BUFFER_STATE
 
b
 );

288 
yypush_buf„r_°©e
 ( 
YY_BUFFER_STATE
 
√w_buf„r
 );

289 
yyp›_buf„r_°©e
 ( );

291 
yyísuª_buf„r_°ack
 ( );

292 
yy_lﬂd_buf„r_°©e
 ( );

293 
yy_öô_buf„r
 ( 
YY_BUFFER_STATE
 
b
, 
FILE
 *
fûe
 );

294 
	#YY_FLUSH_BUFFER
 
	`yy_Êush_buf„r
–
YY_CURRENT_BUFFER
 )

	)

296 
YY_BUFFER_STATE
 
yy_sˇn_buf„r
 ( *
ba£
, 
yy_size_t
 
size
 );

297 
YY_BUFFER_STATE
 
yy_sˇn_°rög
 ( c⁄° *
yy_°r
 );

298 
YY_BUFFER_STATE
 
yy_sˇn_byãs
 ( c⁄° *
byãs
, 
Àn
 );

300 *
yyÆloc
 ( 
yy_size_t
 );

301 *
yyªÆloc
 ( *, 
yy_size_t
 );

302 
yy‰ì
 ( * );

304 
	#yy_√w_buf„r
 
yy_¸óã_buf„r


	)

305 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

307 i‡–! 
YY_CURRENT_BUFFER
 ){ \

308 
	`yyísuª_buf„r_°ack
 (); \

309 
YY_CURRENT_BUFFER_LVALUE
 = \

310 
	`yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 ); \

312 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

313 }

	)

314 
	#yy_£t_bﬁ
(
©_bﬁ
) \

316 i‡–! 
YY_CURRENT_BUFFER
 ){\

317 
	`yyísuª_buf„r_°ack
 (); \

318 
YY_CURRENT_BUFFER_LVALUE
 = \

319 
	`yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 ); \

321 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

322 }

	)

323 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

326 
Êex_uöt8_t
 
	tYY_CHAR
;

328 
FILE
 *
	gyyö
 = 
NULL
, *
	gyyout
 = NULL;

330 
	tyy_°©e_ty≥
;

332 
yylöío
;

333 
	gyylöío
 = 1;

335 *
yyãxt
;

336 #ifde‡
yyãxt_±r


337 #unde‡
yyãxt_±r


339 
	#yyãxt_±r
 
yyãxt


	)

341 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 ( );

342 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 ( yy_°©e_ty≥ 
cuºít_°©e
 );

343 
yy_gë_√xt_buf„r
 ( );

344 
yyn‹ëu∫
 
yy_Áèl_îr‹
 ( c⁄° * 
msg
 );

349 
	#YY_DO_BEFORE_ACTION
 \

350 (
yyãxt_±r
Ë
yy_bp
; \

351 
yyÀng
 = (Ë(
yy_˝
 - 
yy_bp
); \

352 (
yy_hﬁd_ch¨
Ë*
yy_˝
; \

353 *
yy_˝
 = '\0'; \

354 (
yy_c_buf_p
Ë
yy_˝
;

	)

355 
	#YY_NUM_RULES
 39

	)

356 
	#YY_END_OF_BUFFER
 40

	)

359 
	syy_å™s_öfo


361 
Êex_öt32_t
 
	myy_vîify
;

362 
Êex_öt32_t
 
	myy_nxt
;

364 c⁄° 
Êex_öt16_t
 
	gyy_ac˚±
[261] =

396 c⁄° 
YY_CHAR
 
	gyy_ec
[256] =

428 c⁄° 
YY_CHAR
 
	gyy_mëa
[55] =

438 c⁄° 
Êex_öt16_t
 
	gyy_ba£
[269] =

471 c⁄° 
Êex_öt16_t
 
	gyy_def
[269] =

504 c⁄° 
Êex_öt16_t
 
	gyy_nxt
[498] =

563 c⁄° 
Êex_öt16_t
 
	gyy_chk
[498] =

622 
yy_°©e_ty≥
 
	gyy_œ°_ac˚±ög_°©e
;

623 *
	gyy_œ°_ac˚±ög_˝os
;

625 
yy_Êex_debug
;

626 
	gyy_Êex_debug
 = 0;

631 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

632 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

633 
	#YY_MORE_ADJ
 0

	)

634 
	#YY_RESTORE_YY_MORE_OFFSET


	)

635 *
	gyyãxt
;

638 
	~"yy_syn.èb.h
"

639 
	~"ÀxDól.h
"

643 
	#INITIAL
 0

	)

645 #i‚de‡
YY_NO_UNISTD_H


650 
	~<uni°d.h
>

653 #i‚de‡
YY_EXTRA_TYPE


654 
	#YY_EXTRA_TYPE
 *

	)

657 
yy_öô_globÆs
 ( );

662 
yyÀx_de°roy
 ( );

664 
yygë_debug
 ( );

666 
yy£t_debug
 ( 
debug_Êag
 );

668 
YY_EXTRA_TYPE
 
yygë_exåa
 ( );

670 
yy£t_exåa
 ( 
YY_EXTRA_TYPE
 
u£r_deföed
 );

672 
FILE
 *
yygë_ö
 ( );

674 
yy£t_ö
 ( 
FILE
 * 
_ö_°r
 );

676 
FILE
 *
yygë_out
 ( );

678 
yy£t_out
 ( 
FILE
 * 
_out_°r
 );

680 
yygë_Àng
 ( );

682 *
yygë_ãxt
 ( );

684 
yygë_löío
 ( );

686 
yy£t_löío
 ( 
_löe_numbî
 );

692 #i‚de‡
YY_SKIP_YYWRAP


693 #ifde‡
__˝lu•lus


694 "C" 
yywøp
 ( );

696 
yywøp
 ( );

700 #i‚de‡
YY_NO_UNPUT


702 
yyu≈ut
 ( 
c
, *
buf_±r
 );

706 #i‚de‡
yyãxt_±r


707 
yy_Êex_°∫˝y
 ( *, const *, );

710 #ifde‡
YY_NEED_STRLEN


711 
yy_Êex_°æí
 ( const * );

714 #i‚de‡
YY_NO_INPUT


715 #ifde‡
__˝lu•lus


716 
yyöput
 ( );

718 
öput
 ( );

724 #i‚de‡
YY_READ_BUF_SIZE


725 #ifde‡
__ü64__


727 
	#YY_READ_BUF_SIZE
 16384

	)

729 
	#YY_READ_BUF_SIZE
 8192

	)

734 #i‚de‡
ECHO


738 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
yyãxt
, (
size_t
Ë
yyÀng
, 1, 
yyout
 )Ë{} } 0)

	)

744 #i‚de‡
YY_INPUT


745 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

746 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

748 
c
 = '*'; \

749 
n
; \

750  
n
 = 0;Ç < 
max_size
 && \

751 (
c
 = 
	`gëc
–
yyö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

752 
buf
[
n
] = (Ë
c
; \

753 i‡–
c
 == '\n' ) \

754 
buf
[
n
++] = (Ë
c
; \

755 i‡–
c
 =
EOF
 && 
	`„º‹
–
yyö
 ) ) \

756 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

757 
ªsu…
 = 
n
; \

761 
î∫o
=0; \

762  (
ªsu…
 = (Ë
	`‰ód
(
buf
, 1, (
yy_size_t
Ë
max_size
, 
yyö
)Ë=0 && 
	`„º‹
(yyin)) \

764 if–
î∫o
 !
EINTR
) \

766 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

769 
î∫o
=0; \

770 
	`˛óªº
(
yyö
); \

774 

	)

781 #i‚de‡
yyãrmö©e


782 
	#yyãrmö©e
(Ë 
YY_NULL


	)

786 #i‚de‡
YY_START_STACK_INCR


787 
	#YY_START_STACK_INCR
 25

	)

791 #i‚de‡
YY_FATAL_ERROR


792 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

800 #i‚de‡
YY_DECL


801 
	#YY_DECL_IS_OURS
 1

	)

803 
yyÀx
 ();

805 
	#YY_DECL
 
	`yyÀx
 ()

	)

811 #i‚de‡
YY_USER_ACTION


812 
	#YY_USER_ACTION


	)

816 #i‚de‡
YY_BREAK


817 
	#YY_BREAK
 ;

	)

820 
	#YY_RULE_SETUP
 \

821 
YY_USER_ACTION


	)

825 
	gYY_DECL


827 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

828 *
	gyy_˝
, *
	gyy_bp
;

829 
	gyy_a˘
;

831 i‡–!(
	gyy_öô
) )

833 (
	gyy_öô
) = 1;

835 #ifde‡
YY_USER_INIT


836 
	gYY_USER_INIT
;

839 i‡–! (
	gyy_°¨t
) )

840 (
	gyy_°¨t
) = 1;

842 i‡–! 
	gyyö
 )

843 
	gyyö
 = 
°dö
;

845 i‡–! 
	gyyout
 )

846 
	gyyout
 = 
°dout
;

848 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

849 
yyísuª_buf„r_°ack
 ();

850 
	gYY_CURRENT_BUFFER_LVALUE
 =

851 
yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 );

854 
yy_lﬂd_buf„r_°©e
( );

864 
	gyy_˝
 = (
yy_c_buf_p
);

867 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

872 
	gyy_bp
 = 
yy_˝
;

874 
	gyy_cuºít_°©e
 = (
yy_°¨t
);

875 
	gyy_m©ch
:

878 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)] ;

879 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

881 (
	gyy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

882 (
	gyy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

884  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

886 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

887 i‡–
	gyy_cuºít_°©e
 >= 261 )

888 
yy_c
 = 
yy_mëa
[yy_c];

890 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
];

891 ++
	gyy_˝
;

893  
	gyy_ba£
[
yy_cuºít_°©e
] != 443 );

895 
	gyy_föd_a˘i⁄
:

896 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

897 i‡–
	gyy_a˘
 == 0 )

899 
yy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

900 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

901 
	gyy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

904 
	gYY_DO_BEFORE_ACTION
;

906 
	gdo_a˘i⁄
:

908  
yy_a˘
 )

912 *
yy_˝
 = (
yy_hﬁd_ch¨
);

913 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

914 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

915 
	gyy_föd_a˘i⁄
;

919 
YY_RULE_SETUP


922 
YY_BREAK


924 
YY_RULE_SETUP


927 
YY_BREAK


929 
YY_RULE_SETUP


932 
YY_BREAK


935 
YY_RULE_SETUP


937 {  
OBJ_IDEN_
; }

938 
YY_BREAK


940 
YY_RULE_SETUP


942 {  
OBJ_SPECIFIER
; }

943 
YY_BREAK


945 
YY_RULE_SETUP


947 {  
OBJECTS_
; }

948 
YY_BREAK


950 
YY_RULE_SETUP


952 {  
TRAP_SPECIFIER
; }

953 
YY_BREAK


955 
YY_RULE_SETUP


957 {  
SYNTAX_SPECIFIER
; }

958 
YY_BREAK


976 
YY_RULE_SETUP


978 { 
yylvÆ
 = 
°rDu∂iˇã
(
yyãxt
);  
	gTYPE
; }

979 
YY_BREAK


981 
YY_RULE_SETUP


983 {  
SEQ
; }

984 
YY_BREAK


986 
YY_RULE_SETUP


988 {  
INDEX_
; }

989 
YY_BREAK


991 
YY_RULE_SETUP


993 {  
ACCESS_SPECIFIER
; }

994 
YY_BREAK


996 
YY_RULE_SETUP


998 {  
DEF
; }

999 
YY_BREAK


1001 
YY_RULE_SETUP


1003 {  
BEGIN_
; }

1004 
YY_BREAK


1006 
YY_RULE_SETUP


1008 {  
IMPORTS_
; }

1009 
YY_BREAK


1011 
YY_RULE_SETUP


1013 {  
FROM_
; }

1014 
YY_BREAK


1016 
YY_RULE_SETUP


1018 {  
COMMA
; }

1019 
YY_BREAK


1021 
YY_RULE_SETUP


1023 {  
SEMICOLON
; }

1024 
YY_BREAK


1026 
YY_RULE_SETUP


1028 {  
END_
; }

1029 
YY_BREAK


1039 
YY_RULE_SETUP


1041 { 
yylvÆ
 = 
°rDu∂iˇã
(
yyãxt
);  
	gACCESS_VALUE
; }

1042 
YY_BREAK


1044 
YY_RULE_SETUP


1046 {  
STATUS_SPECIFIER
; }

1047 
YY_BREAK


1049 
YY_RULE_SETUP


1051 {  
STATUS_VALUE
; }

1052 
YY_BREAK


1054 
YY_RULE_SETUP


1056 {  
DESC_SPECIFIER
; }

1057 
YY_BREAK


1060 
YY_RULE_SETUP


1062 { 
yylvÆ
 = 
°rDu∂iˇã
(
yyãxt
);  
	gDESC_VALUE
; }

1063 
YY_BREAK


1065 
YY_RULE_SETUP


1067 {  
ASSIGNED
; }

1068 
YY_BREAK


1070 
YY_RULE_SETUP


1072 {  
L_BRACE
; }

1073 
YY_BREAK


1075 
YY_RULE_SETUP


1077 {  
R_BRACE
; }

1078 
YY_BREAK


1080 
YY_RULE_SETUP


1082 { 
yylvÆ
 = 
°rDu∂iˇã
(
yyãxt
);  
	gNUM
; }

1083 
YY_BREAK


1085 
YY_RULE_SETUP


1087 { 
yylvÆ
 = 
°rDu∂iˇã
(
yyãxt
);  
	gIDENTIFIER
; }

1088 
YY_BREAK


1090 
YY_RULE_SETUP


1092 
ECHO
;

1093 
	gYY_BREAK


1095 
YY_STATE_EOF
(
INITIAL
):

1096 
yyãrmö©e
();

1098 
	gYY_END_OF_BUFFER
:

1101 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - (
yyãxt_±r
)) - 1;

1104 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

1105 
YY_RESTORE_YY_MORE_OFFSET


1107 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

1118 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1119 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
yyö
;

1120 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

1130 i‡–(
	gyy_c_buf_p
Ë<&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

1132 
yy_°©e_ty≥
 
yy_√xt_°©e
;

1134 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

1136 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1147 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

1149 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1151 i‡–
	gyy_√xt_°©e
 )

1154 
	gyy_˝
 = ++(
yy_c_buf_p
);

1155 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

1156 
	gyy_m©ch
;

1161 
	gyy_˝
 = (
yy_c_buf_p
);

1162 
	gyy_föd_a˘i⁄
;

1166  
yy_gë_√xt_buf„r
( ) )

1168 
	gEOB_ACT_END_OF_FILE
:

1170 (
yy_did_buf„r_swôch_⁄_eof
) = 0;

1172 i‡–
yywøp
( ) )

1183 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1185 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

1186 
	gdo_a˘i⁄
;

1191 i‡–! (
	gyy_did_buf„r_swôch_⁄_eof
) )

1192 
	gYY_NEW_FILE
;

1197 
	gEOB_ACT_CONTINUE_SCAN
:

1198 (
yy_c_buf_p
) =

1199 (
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

1201 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1203 
	gyy_˝
 = (
yy_c_buf_p
);

1204 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1205 
	gyy_m©ch
;

1207 
	gEOB_ACT_LAST_MATCH
:

1208 (
yy_c_buf_p
) =

1209 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)];

1211 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1213 
	gyy_˝
 = (
yy_c_buf_p
);

1214 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1215 
	gyy_föd_a˘i⁄
;

1221 
YY_FATAL_ERROR
(

1235 
	$yy_gë_√xt_buf„r
 ()

1237 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

1238 *
sour˚
 = (
yyãxt_±r
);

1239 
numbî_to_move
, 
i
;

1240 
ªt_vÆ
;

1242 i‡–(
yy_c_buf_p
Ë> &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
) + 1] )

1243 
	`YY_FATAL_ERROR
(

1246 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

1248 i‡–(
yy_c_buf_p
Ë- (
yyãxt_±r
Ë- 
YY_MORE_ADJ
 == 1 )

1253  
EOB_ACT_END_OF_FILE
;

1261  
EOB_ACT_LAST_MATCH
;

1268 
numbî_to_move
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
) - 1);

1270  
i
 = 0; i < 
numbî_to_move
; ++i )

1271 *(
de°
++Ë*(
sour˚
++);

1273 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

1277 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars) = 0;

1281 
num_to_ªad
 =

1282 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

1284  
num_to_ªad
 <= 0 )

1288 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER_LVALUE
;

1290 
yy_c_buf_p_off£t
 =

1291 (Ë((
yy_c_buf_p
Ë- 
b
->
yy_ch_buf
);

1293 i‡–
b
->
yy_is_our_buf„r
 )

1295 
√w_size
 = 
b
->
yy_buf_size
 * 2;

1297 i‡–
√w_size
 <= 0 )

1298 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

1300 
b
->
yy_buf_size
 *= 2;

1302 
b
->
yy_ch_buf
 = (*)

1304 
	`yyªÆloc
–(*Ë
b
->
yy_ch_buf
,

1305 (
yy_size_t
Ë(
b
->
yy_buf_size
 + 2) );

1309 
b
->
yy_ch_buf
 = 
NULL
;

1311 i‡–! 
b
->
yy_ch_buf
 )

1312 
	`YY_FATAL_ERROR
(

1315 (
yy_c_buf_p
Ë&
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

1317 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

1318 
numbî_to_move
 - 1;

1322 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

1323 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

1326 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

1327 (
yy_n_ch¨s
), 
num_to_ªad
 );

1329 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1332 i‡–(
yy_n_ch¨s
) == 0 )

1334 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

1336 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

1337 
	`yyª°¨t
–
yyö
 );

1342 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

1343 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

1344 
YY_BUFFER_EOF_PENDING
;

1349 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

1351 i‡(((
yy_n_ch¨s
Ë+ 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

1353 
√w_size
 = (
yy_n_ch¨s
Ë+ 
numbî_to_move
 + ((yy_n_chars) >> 1);

1354 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`yyªÆloc
(

1355 (*Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
, (
yy_size_t
Ë
√w_size
 );

1356 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

1357 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

1359 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 = (Ë(
√w_size
 - 2);

1362 (
yy_n_ch¨s
Ë+
numbî_to_move
;

1363 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] = 
YY_END_OF_BUFFER_CHAR
;

1364 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
Ë+ 1] = 
YY_END_OF_BUFFER_CHAR
;

1366 (
yyãxt_±r
Ë&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

1368  
ªt_vÆ
;

1369 
	}
}

1373 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 ()

1375 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

1376 *
yy_˝
;

1378 
yy_cuºít_°©e
 = (
yy_°¨t
);

1380  
yy_˝
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
; yy_˝ < (
yy_c_buf_p
); ++yy_cp )

1382 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

1383 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1385 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1386 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1388  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1390 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1391 i‡–
yy_cuºít_°©e
 >= 261 )

1392 
yy_c
 = 
yy_mëa
[yy_c];

1394 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + 
yy_c
];

1397  
yy_cuºít_°©e
;

1398 
	}
}

1405 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

1407 
yy_is_jam
;

1408 *
yy_˝
 = (
yy_c_buf_p
);

1410 
YY_CHAR
 
yy_c
 = 1;

1411 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1413 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1414 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1416  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1418 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1419 i‡–
yy_cuºít_°©e
 >= 261 )

1420 
yy_c
 = 
yy_mëa
[yy_c];

1422 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + 
yy_c
];

1423 
yy_is_jam
 = (
yy_cuºít_°©e
 == 260);

1425  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

1426 
	}
}

1428 #i‚de‡
YY_NO_UNPUT


1430 
	$yyu≈ut
 (
c
, * 
yy_bp
 )

1432 *
yy_˝
;

1434 
yy_˝
 = (
yy_c_buf_p
);

1437 *
yy_˝
 = (
yy_hﬁd_ch¨
);

1439 i‡–
yy_˝
 < 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 + 2 )

1442 
numbî_to_move
 = (
yy_n_ch¨s
) + 2;

1443 *
de°
 = &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[

1444 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 + 2];

1445 *
sour˚
 =

1446 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
];

1448  
sour˚
 > 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

1449 *--
de°
 = *--
sour˚
;

1451 
yy_˝
 +(Ë(
de°
 - 
sour˚
);

1452 
yy_bp
 +(Ë(
de°
 - 
sour˚
);

1453 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 =

1454 (
yy_n_ch¨s
Ë(Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
;

1456 i‡–
yy_˝
 < 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 + 2 )

1457 
	`YY_FATAL_ERROR
( "flex scannerÖush-back overflow" );

1460 *--
yy_˝
 = (Ë
c
;

1462 (
yyãxt_±r
Ë
yy_bp
;

1463 (
yy_hﬁd_ch¨
Ë*
yy_˝
;

1464 (
yy_c_buf_p
Ë
yy_˝
;

1465 
	}
}

1469 #i‚de‡
YY_NO_INPUT


1470 #ifde‡
__˝lu•lus


1471 
	$yyöput
 ()

1473 
	$öput
 ()

1477 
c
;

1479 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1481 i‡–*(
yy_c_buf_p
Ë=
YY_END_OF_BUFFER_CHAR
 )

1487 i‡–(
yy_c_buf_p
Ë< &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

1489 *(
yy_c_buf_p
) = '\0';

1493 
off£t
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
));

1494 ++(
yy_c_buf_p
);

1496  
	`yy_gë_√xt_buf„r
( ) )

1498 
EOB_ACT_LAST_MATCH
:

1510 
	`yyª°¨t
–
yyö
 );

1514 
EOB_ACT_END_OF_FILE
:

1516 i‡–
	`yywøp
( ) )

1519 i‡–! (
yy_did_buf„r_swôch_⁄_eof
) )

1520 
YY_NEW_FILE
;

1521 #ifde‡
__˝lu•lus


1522  
	`yyöput
();

1524  
	`öput
();

1528 
EOB_ACT_CONTINUE_SCAN
:

1529 (
yy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
off£t
;

1535 
c
 = *(*Ë(
yy_c_buf_p
);

1536 *(
yy_c_buf_p
) = '\0';

1537 (
yy_hﬁd_ch¨
Ë*++(
yy_c_buf_p
);

1539  
c
;

1540 
	}
}

1548 
	$yyª°¨t
 (
FILE
 * 
öput_fûe
 )

1551 i‡–! 
YY_CURRENT_BUFFER
 ){

1552 
	`yyísuª_buf„r_°ack
 ();

1553 
YY_CURRENT_BUFFER_LVALUE
 =

1554 
	`yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 );

1557 
	`yy_öô_buf„r
–
YY_CURRENT_BUFFER
, 
öput_fûe
 );

1558 
	`yy_lﬂd_buf„r_°©e
( );

1559 
	}
}

1565 
	$yy_swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

1573 
	`yyísuª_buf„r_°ack
 ();

1574 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

1577 i‡–
YY_CURRENT_BUFFER
 )

1580 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1581 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

1582 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1585 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1586 
	`yy_lﬂd_buf„r_°©e
( );

1593 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1594 
	}
}

1596 
	$yy_lﬂd_buf„r_°©e
 ()

1598 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1599 (
yyãxt_±r
Ë(
yy_c_buf_p
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

1600 
yyö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

1601 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
);

1602 
	}
}

1610 
YY_BUFFER_STATE
 
	$yy_¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 )

1612 
YY_BUFFER_STATE
 
b
;

1614 
b
 = (
YY_BUFFER_STATE
Ë
	`yyÆloc
––
yy_buf„r_°©e
 ) );

1615 i‡–! 
b
 )

1616 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

1618 
b
->
yy_buf_size
 = 
size
;

1623 
b
->
yy_ch_buf
 = (*Ë
	`yyÆloc
–(
yy_size_t
Ë(b->
yy_buf_size
 + 2) );

1624 i‡–! 
b
->
yy_ch_buf
 )

1625 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

1627 
b
->
yy_is_our_buf„r
 = 1;

1629 
	`yy_öô_buf„r
–
b
, 
fûe
 );

1631  
b
;

1632 
	}
}

1638 
	$yy_dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 )

1641 i‡–! 
b
 )

1644 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1645 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

1647 i‡–
b
->
yy_is_our_buf„r
 )

1648 
	`yy‰ì
–(*Ë
b
->
yy_ch_buf
 );

1650 
	`yy‰ì
–(*Ë
b
 );

1651 
	}
}

1657 
	$yy_öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 )

1660 
€ºno
 = 
î∫o
;

1662 
	`yy_Êush_buf„r
–
b
 );

1664 
b
->
yy_öput_fûe
 = 
fûe
;

1665 
b
->
yy_fûl_buf„r
 = 1;

1671 i‡(
b
 !
YY_CURRENT_BUFFER
){

1672 
b
->
yy_bs_löío
 = 1;

1673 
b
->
yy_bs_cﬁumn
 = 0;

1676 
b
->
yy_is_öãø˘ive
 = 
fûe
 ? (
	`ißây
–
	`fûío
(file) ) > 0) : 0;

1678 
î∫o
 = 
€ºno
;

1679 
	}
}

1685 
	$yy_Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 )

1687 i‡–! 
b
 )

1690 
b
->
yy_n_ch¨s
 = 0;

1696 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

1697 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

1699 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

1701 
b
->
yy_©_bﬁ
 = 1;

1702 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1704 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1705 
	`yy_lﬂd_buf„r_°©e
( );

1706 
	}
}

1714 
	$yypush_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

1716 i‡(
√w_buf„r
 =
NULL
)

1719 
	`yyísuª_buf„r_°ack
();

1722 i‡–
YY_CURRENT_BUFFER
 )

1725 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1726 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

1727 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1731 i‡(
YY_CURRENT_BUFFER
)

1732 (
yy_buf„r_°ack_t›
)++;

1733 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1736 
	`yy_lﬂd_buf„r_°©e
( );

1737 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1738 
	}
}

1744 
	$yyp›_buf„r_°©e
 ()

1746 i‡(!
YY_CURRENT_BUFFER
)

1749 
	`yy_dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

1750 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

1751 i‡((
yy_buf„r_°ack_t›
) > 0)

1752 --(
yy_buf„r_°ack_t›
);

1754 i‡(
YY_CURRENT_BUFFER
) {

1755 
	`yy_lﬂd_buf„r_°©e
( );

1756 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1758 
	}
}

1763 
	$yyísuª_buf„r_°ack
 ()

1765 
yy_size_t
 
num_to_Æloc
;

1767 i‡(!(
yy_buf„r_°ack
)) {

1773 
num_to_Æloc
 = 1;

1774 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
yyÆloc


1775 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1777 i‡–! (
yy_buf„r_°ack
) )

1778 
	`YY_FATAL_ERROR
( "out of dynamic memory in yyensure_buffer_stack()" );

1780 
	`mem£t
((
yy_buf„r_°ack
), 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

1782 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

1783 (
yy_buf„r_°ack_t›
) = 0;

1787 i‡((
yy_buf„r_°ack_t›
Ë>((
yy_buf„r_°ack_max
)) - 1){

1790 
yy_size_t
 
grow_size
 = 8 ;

1792 
num_to_Æloc
 = (
yy_buf„r_°ack_max
Ë+ 
grow_size
;

1793 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
yyªÆloc


1794 ((
yy_buf„r_°ack
),

1795 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1797 i‡–! (
yy_buf„r_°ack
) )

1798 
	`YY_FATAL_ERROR
( "out of dynamic memory in yyensure_buffer_stack()" );

1801 
	`mem£t
((
yy_buf„r_°ack
Ë+ (
yy_buf„r_°ack_max
), 0, 
grow_size
 * (
yy_buf„r_°©e
*));

1802 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

1804 
	}
}

1812 
YY_BUFFER_STATE
 
	$yy_sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 )

1814 
YY_BUFFER_STATE
 
b
;

1816 i‡–
size
 < 2 ||

1817 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

1818 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

1820  
NULL
;

1822 
b
 = (
YY_BUFFER_STATE
Ë
	`yyÆloc
––
yy_buf„r_°©e
 ) );

1823 i‡–! 
b
 )

1824 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_buffer()" );

1826 
b
->
yy_buf_size
 = (Ë(
size
 - 2);

1827 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

1828 
b
->
yy_is_our_buf„r
 = 0;

1829 
b
->
yy_öput_fûe
 = 
NULL
;

1830 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

1831 
b
->
yy_is_öãø˘ive
 = 0;

1832 
b
->
yy_©_bﬁ
 = 1;

1833 
b
->
yy_fûl_buf„r
 = 0;

1834 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1836 
	`yy_swôch_to_buf„r
–
b
 );

1838  
b
;

1839 
	}
}

1849 
YY_BUFFER_STATE
 
	$yy_sˇn_°rög
 (c⁄° * 
yy°r
 )

1852  
	`yy_sˇn_byãs
–
yy°r
, (Ë
	`°æí
(yystr) );

1853 
	}
}

1862 
YY_BUFFER_STATE
 
	$yy_sˇn_byãs
 (c⁄° * 
yybyãs
, 
_yybyãs_Àn
 )

1864 
YY_BUFFER_STATE
 
b
;

1865 *
buf
;

1866 
yy_size_t
 
n
;

1867 
i
;

1870 
n
 = (
yy_size_t
Ë(
_yybyãs_Àn
 + 2);

1871 
buf
 = (*Ë
	`yyÆloc
–
n
 );

1872 i‡–! 
buf
 )

1873 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_bytes()" );

1875  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

1876 
buf
[
i
] = 
yybyãs
[i];

1878 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

1880 
b
 = 
	`yy_sˇn_buf„r
–
buf
, 
n
 );

1881 i‡–! 
b
 )

1882 
	`YY_FATAL_ERROR
( "bad buffer in yy_scan_bytes()" );

1887 
b
->
yy_is_our_buf„r
 = 1;

1889  
b
;

1890 
	}
}

1892 #i‚de‡
YY_EXIT_FAILURE


1893 
	#YY_EXIT_FAILURE
 2

	)

1896 
yyn‹ëu∫
 
	$yy_Áèl_îr‹
 (c⁄° * 
msg
 )

1898 
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

1899 
	`exô
–
YY_EXIT_FAILURE
 );

1900 
	}
}

1904 #unde‡
yyÀss


1905 
	#yyÀss
(
n
) \

1909 
yyÀss_ma¸o_¨g
 = (
n
); \

1910 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

1911 
yyãxt
[
yyÀng
] = (
yy_hﬁd_ch¨
); \

1912 (
yy_c_buf_p
Ë
yyãxt
 + 
yyÀss_ma¸o_¨g
; \

1913 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
); \

1914 *(
yy_c_buf_p
) = '\0'; \

1915 
yyÀng
 = 
yyÀss_ma¸o_¨g
; \

1917  0 )

	)

1924 
	$yygë_löío
 ()

1927  
yylöío
;

1928 
	}
}

1933 
FILE
 *
	$yygë_ö
 ()

1935  
yyö
;

1936 
	}
}

1941 
FILE
 *
	$yygë_out
 ()

1943  
yyout
;

1944 
	}
}

1949 
	$yygë_Àng
 ()

1951  
yyÀng
;

1952 
	}
}

1958 *
	$yygë_ãxt
 ()

1960  
yyãxt
;

1961 
	}
}

1967 
	$yy£t_löío
 (
_löe_numbî
 )

1970 
yylöío
 = 
_löe_numbî
;

1971 
	}
}

1979 
	$yy£t_ö
 (
FILE
 * 
_ö_°r
 )

1981 
yyö
 = 
_ö_°r
 ;

1982 
	}
}

1984 
	$yy£t_out
 (
FILE
 * 
_out_°r
 )

1986 
yyout
 = 
_out_°r
 ;

1987 
	}
}

1989 
	$yygë_debug
 ()

1991  
yy_Êex_debug
;

1992 
	}
}

1994 
	$yy£t_debug
 (
_bdebug
 )

1996 
yy_Êex_debug
 = 
_bdebug
 ;

1997 
	}
}

1999 
	$yy_öô_globÆs
 ()

2005 (
yy_buf„r_°ack
Ë
NULL
;

2006 (
yy_buf„r_°ack_t›
) = 0;

2007 (
yy_buf„r_°ack_max
) = 0;

2008 (
yy_c_buf_p
Ë
NULL
;

2009 (
yy_öô
) = 0;

2010 (
yy_°¨t
) = 0;

2013 #ifde‡
YY_STDINIT


2014 
yyö
 = 
°dö
;

2015 
yyout
 = 
°dout
;

2017 
yyö
 = 
NULL
;

2018 
yyout
 = 
NULL
;

2025 
	}
}

2028 
	$yyÀx_de°roy
 ()

2032 
YY_CURRENT_BUFFER
){

2033 
	`yy_dñëe_buf„r
–
YY_CURRENT_BUFFER
 );

2034 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

2035 
	`yyp›_buf„r_°©e
();

2039 
	`yy‰ì
((
yy_buf„r_°ack
) );

2040 (
yy_buf„r_°ack
Ë
NULL
;

2044 
	`yy_öô_globÆs
( );

2047 
	}
}

2053 #i‚de‡
yyãxt_±r


2054 
	$yy_Êex_°∫˝y
 (* 
s1
, c⁄° * 
s2
, 
n
 )

2057 
i
;

2058  
i
 = 0; i < 
n
; ++i )

2059 
s1
[
i
] = 
s2
[i];

2060 
	}
}

2063 #ifde‡
YY_NEED_STRLEN


2064 
	$yy_Êex_°æí
 (c⁄° * 
s
 )

2066 
n
;

2067  
n
 = 0; 
s
[n]; ++n )

2070  
n
;

2071 
	}
}

2074 *
	$yyÆloc
 (
yy_size_t
 
size
 )

2076  
	`mÆloc
(
size
);

2077 
	}
}

2079 *
	$yyªÆloc
 (* 
±r
, 
yy_size_t
 
size
 )

2089  
	`ªÆloc
(
±r
, 
size
);

2090 
	}
}

2092 
	$yy‰ì
 (* 
±r
 )

2094 
	`‰ì
–(*Ë
±r
 );

2095 
	}
}

2097 
	#YYTABLES_NAME
 "yyèbÀs"

	)

2101 
	$yywøp
() {

2103 
	}
}

2105 
YY_BUFFER_STATE
 
	$gëCuºítBuf„rSèã
() {

2106  
YY_CURRENT_BUFFER
;

2107 
	}
}

	@src/list.c

5 
	~<°ddef.h
>

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

8 
	~"li°.h
"

9 
	~"ty≥.h
"

10 
	~"di•©chî.h
"

11 
	~"symbﬁTbl.h
"

14 
	mSYM_TRAVEL_CONTINUE
 = 10,

15 
	mSYM_TRAVEL_STOP
 = 11

21 
li°Node
 *
	$li°NodePªv
(
li°Node
 *
¶iNode
) {

22 i‡(
	`isNuŒPå
(
¶iNode
Ë|| isNuŒPå(¶iNode->
√xt
))

23  
NULL
;

24  
¶iNode
->
√xt
;

25 
	}
}

27 
li°Node
 * 
	$li°NodeNext
(
li°Node
 *
¶iNode
) {

28 i‡(
	`isNuŒPå
(
¶iNode
Ë|| isNuŒPå(¶iNode->
¥ev
))

29  
NULL
;

30  
¶iNode
->
¥ev
;

31 
	}
}

33 
li°Node
 * 
	$li°NodeIn£π
(
li°Node
 *
hód
,Üi°Nodê*
¶iNode
) {

34 
li°Node
 *
middÀ
;

36 i‡(
	`isNuŒPå
(
hód
Ë|| isNuŒPå(
¶iNode
)) {

37  
NULL
;

39 i‡(
hód
->
√xt
 =
NULL
) {

40 
hód
->
√xt
 = 
¶iNode
;

42 
middÀ
 = 
hód
->
√xt
;

43 
hód
->
√xt
 = 
¶iNode
;

44 
¶iNode
->
√xt
 = 
middÀ
;

46  
¶iNode
;

47 
	}
}

49 
li°Node
 *
	$li°NodeDñëe
(
li°Node
 *
¶iNode
) {

50 i‡(
	`isNuŒPå
(
¶iNode
)) {

51  
NULL
;

53 i‡(
¶iNode
->
¥ev
 !
NULL
 && sliNode->
√xt
 != NULL) {

55 
¶iNode
->
¥ev
->
√xt
 = sliNode->next;

56 
¶iNode
->
√xt
->
¥ev
 = sliNode->prev;

57 } if(
¶iNode
->
¥ev
 !
NULL
) {

59 
¶iNode
->
√xt
->
¥ev
 = 
NULL
;

60 } i‡(
¶iNode
->
√xt
 !
NULL
) {

62 
¶iNode
->
¥ev
->
√xt
 = 
NULL
;

66 
	}
}

68 
li°Node
 * 
	$li°NodeTaû
(
li°Node
 *
hód
) {

69 i‡(
	`isNuŒPå
(
hód
)) {

70  
NULL
;

72 
hód
->
√xt
) {

73 
hód
 = hód->
√xt
;

75  
hód
;

76 
	}
}

78 
li°Node
 * 
	$li°NodeAµíd
(
li°Node
 *
li°H
,Üi°Nodê*
li°N
) {

79 i‡(
	`isNuŒPå
(
li°H
Ë|| isNuŒPå(
li°N
)) {

80  
NULL
;

82 
li°H
 = 
	`li°NodeTaû
(listH);

83 
	`li°NodeIn£π
(
li°H
, 
li°N
);

84  
li°N
;

85 
	}
}

87 
boﬁ
 
	$li°NodeIsEm±y
(
li°Node
 *
hód
) {

88 
i
 = 0;

89 i‡(
	`isNuŒPå
(
hód
)) {

90  
FALSE
;

92 i‡(
hód
->
√xt
 !
NULL
) {

93  
TRUE
;

95  
FALSE
;

97 
	}
}

99 
	$li°NodeTøvñ
(
li°Node
 *
hód
, 
li°NodeTask
 
func
, *
¨g
) {

100 i‡(
	`isNuŒPå
(
hód
Ë|| isNuŒPå(
func
Ë|| isNuŒPå(
¨g
)) {

101  
ERROR_NULL_REF
;

103 
hód
 !
NULL
) {

104 
	`func
(
hód
, 
¨g
);

105 
hód
 = 
	`li°NodeNext
(head);

107  
ERROR_NONE
;

108 
	}
}

113 
¶i˚
 * 
	$¶i˚C⁄°ru˘
(
¶iKey
, *
¶iVÆ
) {

114 
¶i˚
 *
¶i
 = (¶i˚ *)
	`mÆloc
((slice));

116 
¶i
->
¶iKey
 = sliKey;

117 
¶i
->
¶iVÆ
 = sliVal;

118 
¶i
->
¶iNode
.
√xt
 = 
NULL
;

119 
¶i
->
¶iNode
.
¥ev
 = 
NULL
;

120  
¶i
;

121 
	}
}

123 
boﬁ
 
	$¶i˚De°ru˘
(
¶i˚
 *
¶i
) {

124 i‡(
	`isNuŒPå
(
¶i
)) {

125  
FALSE
;

127 i‡(!
	`isNuŒPå
(
¶i
->
¶iVÆ
)) {

128 
	`RELEASE_MEM
(
¶i
->
¶iVÆ
);

130 
	`RELEASE_MEM
(
¶i
);

131  
TRUE
;

132 
	}
}

134 
¶i˚
 * 
	$¶i˚Pªv
(
¶i˚
 *
¶i
) {

135 i‡(!
	`isNuŒPå
(
¶i
Ë&& isNuŒPå(¶i->
¶iNode
.
¥ev
)) {

136  
NULL
;

138  
	`c⁄èöîOf
(
¶i
->
¶iNode
.
¥ev
, 
¶i˚
, sliNode);

139 
	}
}

141 
¶i˚
 * 
	$¶i˚Next
(
¶i˚
 *
¶i
) {

142 i‡(!
	`isNuŒPå
(
¶i
Ë&& isNuŒPå(¶i->
¶iNode
.
√xt
)) {

143  
NULL
;

145  
	`c⁄èöîOf
(
¶i
->
¶iNode
.
√xt
, 
¶i˚
, sliNode);

146 
	}
}

148 
¶i˚
 * 
	$¶i˚Gë
(
¶i˚
 *
¶iHód
, 
¶iKey
) {

149 i‡(
	`isNuŒPå
(
¶iHód
)) {

150 
mib2docEº‹
 = 
ERROR_NULL_REF
;

151  
NULL
;

154 ; 
¶iHód
 !
NULL
; sliHód = 
	`¶i˚Next
(sliHead)) {

155 i‡(
¶iHód
->
¶iKey
 == sliKey)

156  
¶iHód
;

158  
NULL
;

159 
	}
}

161 * 
	$¶i˚GëVÆ
(
¶i˚
 *
¶iHód
, 
¶iKey
) {

162 
¶i˚
 *
¶i
;

164 i‡(
¶i
 = 
	`¶i˚Gë
(
¶iHód
, 
¶iKey
))

165  
¶i
->
¶iVÆ
;

166  
NULL
;

167 
	}
}

169 
	$¶i˚St‹e
(
¶i˚
 *
¶iHód
, sli˚ *
√wSli
) {

170 i‡(
	`isNuŒPå
(
¶iHód
Ë|| isNuŒPå(
√wSli
)) {

171  
ERROR_NULL_REF
;

174 i‡(
	`¶i˚Gë
(
¶iHód
, 
√wSli
->
¶iKey
)) {

175  
ERROR_NONE
;

178 
¶iHód
 !
NULL
) {

179 i‡(
	`¶i˚Next
(
¶iHód
Ë=
NULL
) {

180 
¶iHód
->
¶iNode
.
√xt
 = &
√wSli
->sliNode;

181  
ERROR_NONE
;

183 
¶iHód
 = 
	`¶i˚Next
(sliHead);

185  
TRUE
;

186 
	}
}

188 
boﬁ
 
	$¶i˚Rñó£
(
¶i˚
 *
¶i
) {

189 
¶i˚
 *
pSli
;

190 
¶i˚
 *
pSli_√xt
;

192 i‡(
	`isNuŒPå
(
¶i
))

193  
FALSE
;

195 
pSli
 = 
¶i
;ÖSlò!
NULL
;ÖSlò
pSli_√xt
) {

196 
pSli_√xt
 = 
	`¶i˚Next
(
pSli
);

197 
	`¶i˚De°ru˘
(
pSli
);

199  
TRUE
;

200 
	}
}

202 
boﬁ
 
	$¶i˚Re£t
(
¶i˚
 *
¶i
) {

203 
¶i˚
 *
pSli
;

205 i‡(
	`isNuŒPå
(
¶i
)) {

206  
FALSE
;

208 
¶i
 !
NULL
) {

209 
pSli
 = 
¶i
;

210 
¶i
 = 
	`¶i˚Next
(sli);

211 
	`RELEASE_MEM
(
pSli
);

214  
TRUE
;

215 
	}
}

225 
di•©chP¨am
 * 
	$disP¨amC⁄°ru˘
(*
∑øm
) {

226 
di•©chP¨am
 *
ªt
;

228 i‡(
	`isNuŒPå
(
∑øm
)) {

229  
NULL
;

232 
ªt
 = (
di•©chP¨am
 *)
	`mÆloc
((dispatchParam));

233 
	`mem£t
(
ªt
, 0, (
di•©chP¨am
));

234 
ªt
->
∑øm
 =Öaram;

236  
ªt
;

237 
	}
}

239 
di•©chP¨am
 * 
	$di•©chP¨amPªv
(
di•©chP¨am
 *
di•¨am
) {

240 
li°Node
 *
¥ev
 = 
di•¨am
->
node
.prev;

241 i‡(
	`isNuŒPå
(
¥ev
))

242  
NULL
;

243  
	`c⁄èöîOf
(
¥ev
, 
di•©chP¨am
, 
node
);

244 
	}
}

246 
di•©chP¨am
 * 
	$di•©chP¨amNext
(
di•©chP¨am
 *
di•¨am
) {

247 
li°Node
 *
√xt
 = 
di•¨am
->
node
.next;

248 i‡(
	`isNuŒPå
(
√xt
))

249  
NULL
;

250  
	`c⁄èöîOf
(
√xt
, 
di•©chP¨am
, 
node
);

251 
	}
}

253 
di•©chP¨am
 * 
	$disP¨amSt‹e
(
di•©chP¨am
 *
hód
, di•©chP¨am *
√w
) {

254 i‡(
hód
 =
NULL
 || 
√w
 == NULL) {

255 
mib2docEº‹
 = 
ERROR_NULL_REF
;

256  
NULL
;

259 
	`li°NodeIn£π
(
	`li°NodeTaû
(&
hód
->
node
), &
√w
->node);

260  
√w
;

261 
	}
}

268 
di•©chP¨am
 * 
	$disP¨amRërive
(
di•©chP¨am
 **
hód
) {

269 
di•©chP¨am
 *
ªt
;

271 i‡(!
	`isNuŒPå
(
hód
) && isNullPtr(*head)) {

272 
mib2docEº‹
 = 
ERROR_NULL_REF
;

273  
NULL
;

276 
ªt
 = *
hód
;

277 *
hód
 = 
	`di•©chP¨amNext
(*head);

279  
ªt
;

280 
	}
}

283 
symEº‹Code
 
	gsymTblEº‹
;

284 
symbﬁTabÀ
 
symTabÀ
;

286 
symbﬁTabÀ
 * 
	$symbﬁTabÀC⁄°ru˘
(*
«me
) {

287 
symbﬁTabÀ
 *
√wTabÀ
;

289 i‡(
	`isNuŒPå
(
«me
)) {

290 
mib2docEº‹
 = 
ERROR_NULL_REF
;

291  
NULL
;

293 
√wTabÀ
 = (
symbﬁTabÀ
 *)
	`mÆloc
((symbolTable));

294 
	`mem£t
(
√wTabÀ
, 0, (
symbﬁTabÀ
));

295 
√wTabÀ
->
modName
 = 
«me
;

296  
√wTabÀ
;

297 
	}
}

299 
symbﬁTabÀ
 * 
	$symbﬁTabÀPªv
(
symbﬁTabÀ
 *
tbl
) {

300  
	`c⁄èöîOf
(
tbl
->
symTblNode
.
¥ev
, 
symbﬁTabÀ
, symTblNode);

301 
	}
}

303 
symbﬁTabÀ
 * 
	$symbﬁTabÀNext
(
symbﬁTabÀ
 *
tbl
) {

304  
	`c⁄èöîOf
(
tbl
->
symTblNode
.
√xt
, 
symbﬁTabÀ
, symTblNode);

305 
	}
}

312 
symbﬁTabÀ
 * 
	$symbﬁTabÀSórch
(
symbﬁTabÀ
 *
tblRoŸ
, *
modName
) {

313 i‡(
	`isNuŒPå
(
tblRoŸ
Ë|| isNuŒPå(
modName
)) {

314 
mib2docEº‹
 = 
ERROR_NULL_REF
;

315  
NULL
;

317 
tblRoŸ
) {

318 i‡(!
	`°∫cmp
(
tblRoŸ
->
modName
, modName, 
	`°æí
(modName))) {

319  
tblRoŸ
;

321 
tblRoŸ
 = 
	`symbﬁTabÀNext
(tblRoot);

323 
mib2docEº‹
 = 
SYM_TABLE_NOT_FOUND
;

324  
NULL
;

325 
	}
}

327 
symbﬁTabÀ
 * 
	$symbﬁModuÀAdd
(
symbﬁTabÀ
 *
tblRoŸ
, symbﬁTabÀ *
√wTbl
) {

328 i‡(
	`isNuŒPå
(
tblRoŸ
Ë|| isNuŒPå(
√wTbl
)) {

329 
mib2docEº‹
 = 
ERROR_NULL_REF
;

330  
NULL
;

333 
	`li°NodeIn£π
(
	`li°NodeTaû
(&
tblRoŸ
->
symTblNode
), &
√wTbl
->symTblNode);

334  
√wTbl
;

335 
	}
}

337 
symbﬁ_t
 * 
	$symbﬁPªv
(
symbﬁ_t
 *
sym
) {

338  
	`c⁄èöîOf
(
sym
->
symNode
.
¥ev
, 
symbﬁ_t
, symNode);

339 
	}
}

341 
symbﬁ_t
 * 
	$symbﬁNext
(
symbﬁ_t
 *
sym
) {

342  
	`c⁄èöîOf
(
sym
->
symNode
.
√xt
, 
symbﬁ_t
, symNode);

343 
	}
}

345 
symbﬁ_t
 * 
	$symbﬁAdd
(
symbﬁTabÀ
 *
symTbl
, 
symbﬁ_t
 *
√wSym
, *
modName
) {

346 
symbﬁTabÀ
 *
pSymTbl
;

347 
symbﬁ_t
 *
pSym
;

349 i‡(
	`isNuŒPå
(
modName
Ë|| isNuŒPå(
√wSym
Ë|| isNuŒPå(
symTbl
)) {

350 
mib2docEº‹
 = 
ERROR_NULL_REF
;

351  
NULL
;

353 i‡((
pSymTbl
 = 
	`symbﬁTabÀSórch
(
symTbl
, 
modName
)Ë=
NULL
) {

354 i‡(
mib2docEº‹
 =
SYM_TABLE_NOT_FOUND
)

355 
pSymTbl
 = 
	`symbﬁModuÀAdd
(
symTbl
, 
	`symbﬁTabÀC⁄°ru˘
(
modName
));

358 
pSym
 = 
pSymTbl
->
symbﬁ
;

359 i‡(!
	`symbﬁSórchög
(
pSymTbl
, 
√wSym
->
symIdít
)) {

360 i‡(
mib2docEº‹
 =
SYM_NOT_FOUND
)

361 
	`li°NodeIn£π
(
	`li°NodeTaû
(&
pSym
->
symNode
), &
√wSym
->symNode);

362  
pSym
;

364  
NULL
;

365 
	}
}

367 
symbﬁ_t
 * 
symbﬁTøvñ
(
symbﬁTabÀ
 *
symTblRoŸ
, (*
func
)(symbﬁ_à*
sym
, *
¨g
), *arg) {

368 
ªtVÆ
;

369 
symbﬁ_t
 *
ªt
 = 
NULL
;

370 
symbﬁTabÀ
 *
pSymTbl
;

371 
symbﬁ_t
 *
pSym
;

373 i‡(
	`isNuŒPå
(
symTblRoŸ
)) {

374 
mib2docEº‹
 = 
ERROR_NULL_REF
;

375  
ªt
;

378 
pSymTbl
 = 
symTblRoŸ
;

380 
	`symbﬁTabÀNext
(
pSymTbl
Ë!
NULL
) {

381 
pSym
 = 
pSymTbl
->
symbﬁ
;

383 
pSym
 !
NULL
) {

384 
ªtVÆ
 = 
	`func
(
pSym
, 
¨g
);

385 i‡(
ªtVÆ
 =
SYM_TRAVEL_CONTINUE
) {

387 } i‡(
ªtVÆ
 =
SYM_TRAVEL_STOP
) {

388  
pSym
;

389 } i‡(
ªtVÆ
 =
ERROR_NULL_REF
) {

390  
NULL
;

392 
pSym
 = 
	`symbﬁNext
(pSym);

394 
pSymTbl
 = 
	`symbﬁTabÀNext
(pSymTbl);

396 
mib2docEº‹
 = 
SYM_NOT_FOUND
;

398 
FINISHED
:

399  
ªt
;

400 
	}
}

402 
	$symbﬁIsP¨ítEquÆ
(
symbﬁ_t
 *
sym
, *
¨g
) {

403 *
∑ª¡
;

404 
symbﬁ_t
 *
pSym
;

405 
symbﬁ_t
 *
foundSym
;

407 i‡(
	`isNuŒPå
(
sym
Ë|| isNuŒPå(
¨g
)) {

408  
ERROR_NULL_REF
;

411 
pSym
 = (
symbﬁ_t
 *)
¨g
;

412 
∑ª¡
 = 
pSym
->
symIdít
;

414 i‡(!
	`°∫cmp
(
∑ª¡
, 
sym
->
symIdít
, 
	`°æí
(parent))) {

415 
foundSym
 = (
symbﬁ_t
 *)
	`mÆloc
((symbol_t));

416 
	`mem˝y
(
foundSym
, 
sym
, (
symbﬁ_t
));

417 
pSym
->
symNode
.
√xt
 = &
foundSym
->symNode;

420  
SYM_TRAVEL_CONTINUE
;

421 
	}
}

423 
	$symbﬁSórchög
(
symbﬁTabÀ
 *
symTblRoŸ
, *
sym
) {

425 
	}
}

427 
	$symbﬁSórchögByP¨ít
(
symbﬁTabÀ
 *
symTblRoŸ
, *
∑ª¡
, 
symbﬁ_t
 *
sym
) {

428 i‡(
	`isNuŒPå
(
symTblRoŸ
Ë|| isNuŒPå(
∑ª¡
Ë|| isNuŒPå(
sym
)) {

429  
ERROR_NULL_REF
;

432 
	`mem£t
(
sym
, 0, (
symbﬁ_t
));

433 
sym
->
symIdít
 = 
∑ª¡
;

434 
	`symbﬁTøvñ
(
symTblRoŸ
, 
symbﬁIsP¨ítEquÆ
, (*)
sym
);

436 i‡(
sym
->
symNode
.
√xt
 !
NULL
) {

437  
TRUE
;

439  
FALSE
;

441 
	}
}

	@src/main.c

1 
	~<°dio.h
>

2 
	~"li°.h
"

3 
	~"ty≥.h
"

4 
	~"docGíî©e.h
"

5 
	~"›ti⁄s.h
"

6 
	~"di•©chî.h
"

8 
yyÀx
();

9 
FILE
 *
yyö
;

10 
yy∑r£
 ();

11 *
begöFrom
;

13 
¶i˚
 
	g¶i˚C⁄èöî
;

14 
	gcuºítTabÀ
[
SIZE_OF_CURRENT_TABLE
];

15 *
	g£˘i⁄Rec‹d
[
SIZE_OF_SECTION_RECORD
];

16 
mibObje˘TªeNode
 
mibObje˘TªeRoŸ
;

18 
	$maö
(
¨gc
, *
¨gv
[]) {

19 
tokí
;

20 
ªt
;

21 
FILE
 *
wrôeTo
;

22 
mibObje˘TªeNode
 *
node
;

23 
mibLóveInfo
 *
pInfo
;

25 
begöFrom
 = "sys";

26 
	`di•©chInô
();

27 
	`mibObje˘TªeInô
(&
mibObje˘TªeRoŸ
);

28 
node
 = &
mibObje˘TªeRoŸ
;

29 
	`›ti⁄sInô
(
¨gc
, 
¨gv
);

31 
yyö
 = 
	`f›í
("src/case.mib", "r");

32 i‡(
yyö
 =
NULL
)

33 
	`¥ötf
("%s\n", "case open failed");

35 
ªt
 = 
	`yy∑r£
();

36 i‡(
ªt
 =
ABORT
) {

40 
wrôeTo
 = 
	`f›í
("src/result", "w+");

41 i‡(
wrôeTo
 =
NULL
)

42 
	`¥ötf
("%s\n", "result open failed");

44 
	`documítGí
(&
mibObje˘TªeRoŸ
, 
wrôeTo
);

45 
	`showTªe
(&
mibObje˘TªeRoŸ
);

47 
	}
}

	@src/mibTreeGen.c

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

7 
	~"mibTªeGí.h
"

8 
	~"ty≥.h
"

9 
	~"li°.h
"

10 
	~"queue.h
"

11 
	~"di•©chî.h
"

12 
	~"symbﬁTbl.h
"

15 
mibTªeLóveAdd
(*
idít
, *
ty≥
,

16 *
rw
, *
desc
,

17 *
∑ª¡
, *
suffix
);

18 
mibTªeNodeAdd
(*
idít
, *
oid
, *
∑ª¡
);

19 * 
oidCom∂emít
(*
∑ª¡
, *
suffix
);

21 
	gcuºítTabÀ
[64];

22 
mibObje˘TªeNode
 
roŸ
;

23 
¶i˚
 
¶i˚C⁄èöî
;

24 
mibObje˘TªeNode
 
mibObje˘TªeRoŸ
;

27 
mibObje˘TªeNode
 
	groŸ
;

28 
symbﬁTabÀ
 
	gsymTabÀ
;

29 
¶i˚
 
	gsymCﬁÀ˘Sli˚
;

30 
èrgëSymbﬁLi°
 
	gtSymLi°Hód
;

32 
	$mibObjGí
(
ty≥
) {

33 
ty≥
) {

34 
OBJECT
:

35 
	`mibObjGí_Lóve
();

37 
TRAP
:

38 
	`mibObjGí_å≠
();

40 
OBJECT_IDENTIFIER
:

41 
	`mibObjGí_I¬îNode
();

43 
SEQUENCE
:

50 
	}
}

52 
	$mibObjGí_Lóve
() {

53 *
idít
, *
ty≥
, *
rw
, *
desc
, *
∑ª¡
, *
suffix
, *
oid
;

55 
idít
 = 
	`¶i˚GëVÆ
(&
¶i˚C⁄èöî
, 
SLICE_IDENTIFIER
);

56 
ty≥
 = 
	`¶i˚GëVÆ
(&
¶i˚C⁄èöî
, 
SLICE_TYPE
);

57 
rw
 = 
	`¶i˚GëVÆ
(&
¶i˚C⁄èöî
, 
SLICE_PERMISSION
);

58 
desc
 = 
	`¶i˚GëVÆ
(&
¶i˚C⁄èöî
, 
SLICE_DESCRIPTION
);

59 
∑ª¡
 = 
	`¶i˚GëVÆ
(&
¶i˚C⁄èöî
, 
SLICE_PARENT
);

60 
suffix
 = 
	`¶i˚GëVÆ
(&
¶i˚C⁄èöî
, 
SLICE_OID_SUFFIX
);

62 i‡(
	`isNuŒPå
(
idít
Ë|| isNuŒPå(
ty≥
Ë|| isNuŒPå(
rw
)

63 || 
	`isNuŒPå
(
desc
Ë|| isNuŒPå(descË|| isNuŒPå(
∑ª¡
)

64 || 
	`isNuŒPå
(
suffix
)) {

68 
oid
 = 
	`oidCom∂emít
(
∑ª¡
, 
suffix
);

69 
	`mibTªeLóveAdd
(
idít
, 
ty≥
, 
rw
, 
desc
, 
∑ª¡
, 
oid
);

71 
	`¶i˚Re£t
(
	`¶i˚Next
(&
¶i˚C⁄èöî
));

72 
	`RELEASE_MEM
(
suffix
);

73 
	`RELEASE_MEM
(
∑ª¡
);

75 
	}
}

77 
	$mibObjGí_I¬îNode
() {

78 *
idít
, *
∑ª¡
, *
suffix
, *
oid
;

80 
idít
 = 
	`¶i˚GëVÆ
(&
¶i˚C⁄èöî
, 
SLICE_IDENTIFIER
);

81 
∑ª¡
 = 
	`¶i˚GëVÆ
(&
¶i˚C⁄èöî
, 
SLICE_PARENT
);

82 
suffix
 = 
	`¶i˚GëVÆ
(&
¶i˚C⁄èöî
, 
SLICE_OID_SUFFIX
);

84 i‡(
	`isNuŒPå
(
idít
Ë|| isNuŒPå(
∑ª¡
Ë|| isNuŒPå(
suffix
))

87 
oid
 = 
	`oidCom∂emít
(
∑ª¡
, 
suffix
);

88 
	`mibTªeNodeAdd
(
idít
, 
oid
, 
∑ª¡
);

90 
	`¶i˚Re£t
(
	`¶i˚Next
(&
¶i˚C⁄èöî
));

91 
	`RELEASE_MEM
(
suffix
);

92 
	`RELEASE_MEM
(
∑ª¡
);

94 
	}
}

96 
	$mibObjGí_å≠
() {

97 *
idít
, *
∑ª¡
, *
suffix
, *
oid
, *
desc
, *
ty≥
;

99 
idít
 = 
	`¶i˚GëVÆ
(&
¶i˚C⁄èöî
, 
SLICE_IDENTIFIER
);

100 
ty≥
 = (*)
	`mÆloc
(
	`°æí
("trap")+1);

101 
	`mem£t
(
ty≥
, 0, 
	`°æí
("trap")+1);

102 
	`°∫˝y
(
ty≥
, "å≠", 
	`°æí
("trap"));

103 
∑ª¡
 = 
	`¶i˚GëVÆ
(&
¶i˚C⁄èöî
, 
SLICE_PARENT
);

104 
suffix
 = 
	`¶i˚GëVÆ
(&
¶i˚C⁄èöî
, 
SLICE_OID_SUFFIX
);

105 
desc
 = 
	`¶i˚GëVÆ
(&
¶i˚C⁄èöî
, 
SLICE_DESCRIPTION
);

107 i‡(
	`isNuŒPå
(
idít
Ë|| isNuŒPå(
ty≥
Ë|| isNuŒPå(
∑ª¡
Ë|| isNuŒPå(
suffix
))

110 
oid
 = 
	`oidCom∂emít
(
∑ª¡
, 
suffix
);

111 
	`mibTªeLóveAdd
(
idít
, 
ty≥
, 
NULL
, NULL, 
∑ª¡
, 
oid
);

113 
	`¶i˚Re£t
(
	`¶i˚Next
(&
¶i˚C⁄èöî
));

115 
	`RELEASE_MEM
(
desc
);

116 
	`RELEASE_MEM
(
suffix
);

117 
	`RELEASE_MEM
(
∑ª¡
);

119 
	}
}

121 
	$dól_wôh_£quí˚
(Ë{
	}
}

123 
	$èbÀPröt
(*
idít
, *
oid
, *
rw
, *
dëaû
, 
FILE
 *
ouçut
) {

124 i‡(
	`isNuŒPå
(
idít
Ë|| isNuŒPå(
oid
) ||

125 
	`isNuŒPå
(
rw
Ë|| isNuŒPå(
dëaû
))

127 
	}
}

131 
	$mibTªeLóveAdd
(*
idít
, *
ty≥
,

132 *
rw
, *
desc
,

133 *
∑ª¡
, *
oid
) {

135 
mibObje˘TªeNode
 *
obj
;

136 
mibLóveInfo
 *
pLóveInfo
;

138 i‡(
	`isNuŒPå
(
idít
)

139 || 
	`isNuŒPå
(
ty≥
)

140 || 
	`isNuŒPå
(
∑ª¡
)

141 || 
	`isNuŒPå
(
oid
)) {

145 
obj
 = 
	`mibLóveBuûd
(
idít
, 
ty≥
, 
rw
, 
desc
, 
oid
);

146 i‡(
	`isNuŒPå
(
obj
))

148 
	`ö£π_MibTªe
(&
mibObje˘TªeRoŸ
, 
obj
, 
∑ª¡
);

149 
	}
}

151 
	$mibTªeNodeAdd
(*
idít
, *
oid
, *
∑ª¡
) {

152 
mibObje˘TªeNode
 *
obj
;

154 i‡(
	`isNuŒPå
(
idít
Ë|| isNuŒPå(
oid
))

157 
obj
 = 
	`mibNodeBuûd
(
idít
, 
oid
);

158 i‡(
	`isNuŒPå
(
obj
))

161 
	`ö£π_MibTªe
(&
mibObje˘TªeRoŸ
, 
obj
, 
∑ª¡
);

162 
	}
}

164 * 
	$oidCom∂emít
(*
∑ª¡
, *
suffix
) {

165 *
oid
;

166 
mibObje˘TªeNode
 *
∑ª¡Node
;

168 
oid
 = (*)
	`mÆloc
(
SIZE_OF_OID_STRING
);

169 
	`mem£t
(
oid
, 0, 
SIZE_OF_OID_STRING
);

170 
∑ª¡Node
 = 
	`£¨ch_MibTªe
(&
mibObje˘TªeRoŸ
, 
∑ª¡
);

172 i‡(
∑ª¡Node
 =
NULL
)

173  
NULL
;

175 
	`°∫˝y
(
oid
, 
	`gëOidFromInfo
(
∑ª¡Node
), 
SIZE_OF_OID_STRING
);

176 
	`°∫ˇt
(
oid
, ".", 1);

177 
	`°∫ˇt
(
oid
, 
suffix
, 
	`°æí
(suffix));

179  
oid
;

180 
	}
}

182 
mibObje˘TªeNode
 
mibObje˘TªeRoŸ
;

183 
	$uµîTªeGíî©i⁄
(
symbﬁTabÀ
 *
symTbl
) {

184 
mibObje˘TªeNode
 *
roŸ
;

185 
mibObje˘TªeNode
 *
cuºít
;

186 
mibObje˘TªeNode
 *
chûdNode
;

187 
symbﬁTabÀ
 *
èbÀ
;

188 
symbﬁ_t
 *
sym
;

189 
symbﬁ_t
 *
chûd
;

190 
symbﬁ_t
 *
ãmp
;

191 
gíîicSèck
 
°ack
;

193 i‡(
	`isNuŒPå
(
symTbl
)) {

194  
ERROR_NULL_REF
;

196 
roŸ
 = &
mibObje˘TªeRoŸ
;

197 
	`ö£π_MibTªe
(
roŸ
, 
	`mibNodeBuûd
("iso", "1"), "root");

198 
	`push
(&
°ack
, 
roŸ
);

200 
sym
 = (
symbﬁ_t
 *)
	`mÆloc
((symbol_t));

201 
	`mem£t
(
sym
, 0, (
symbﬁ_t
));

202 
°ack
.
t›
 > 0) {

203 
	`p›
(&
°ack
, 
cuºít
);

204 i‡(
	`symbﬁSórchögByP¨ít
(&
symTabÀ
, 
cuºít
->
idítifõr
, 
sym
)) {

205 
chûd
 = 
	`c⁄èöîOf
(
sym
->
symNode
.
√xt
, 
symbﬁ_t
, symNode);

206 
chûd
 !
NULL
) {

207 i‡(
chûd
->
symTy≥
 =
SYMBOL_TYPE_NODE
) {

208 
chûdNode
 = 
	`mibNodeBuûd
(
	`°rdup
(
chûd
->
symIdít
),

209 
	`°rdup
(
chûd
->
symInfo
.
nodeMëa
.
suffix
));

210 
	`ö£π_MibTªe
(
roŸ
, 
chûdNode
, 
	`°rdup
(
cuºít
->
idítifõr
));

211 
	`push
(&
°ack
, 
chûdNode
);

212 } i‡(
chûd
->
symTy≥
 =
SYMBOL_TYPE_LEAVE
) {

213 
chûdNode
 = 
	`mibLóveBuûd
(
	`°rdup
(
chûd
->
symIdít
),

214 
	`°rdup
(
chûd
->
symInfo
.
ÀaveMëa
.
ty≥
),

215 
	`°rdup
(
chûd
->
symInfo
.
ÀaveMëa
.
≥rmissi⁄
),

216 
NULL
,

217 
	`°rdup
(
chûd
->
symInfo
.
ÀaveMëa
.
suffix
));

218 
	`ö£π_MibTªe
(
roŸ
, 
chûdNode
, 
	`°rdup
(
cuºít
->
idítifõr
));

220 
ãmp
 = 
chûd
;

221 
chûd
 = 
	`c⁄èöîOf
(&chûd->
symNode
, 
symbﬁ_t
, symNode);

223 
	`RELEASE_MEM
(
ãmp
->
symIdít
);

224 
	`RELEASE_MEM
(
ãmp
);

228 
	}
}

233 
symbﬁCﬁÀ˘_BUILD_INNER_NODE
(
di•©chP¨am
 *
∑øm
);

234 
symbﬁCﬁÀ˘_PARAM_DESC
(
di•©chP¨am
 *
∑øm
);

235 
symbﬁCﬁÀ˘_PARAM_IDENT
(
di•©chP¨am
 *
∑øm
);

236 
symbﬁCﬁÀ˘_BUILD_LEAVE_NODE
(
di•©chP¨am
 *
∑øm
);

237 
symbﬁCﬁÀ˘_PARAM_PARENT
(
di•©chP¨am
 *
∑øm
);

238 
symbﬁCﬁÀ˘_PARAM_PERM
(
di•©chP¨am
 *
∑øm
);

239 
symbﬁCﬁÀ˘_BUILD_SEQUENCE
(
di•©chP¨am
 *
∑øm
);

240 
symbﬁCﬁÀ˘_BUILD_SMI_DEF
(
di•©chP¨am
 *
∑øm
);

241 
symbﬁCﬁÀ˘_PARAM_SUFFIX
(
di•©chP¨am
 *
∑øm
);

242 
symbﬁCﬁÀ˘_BUILD_TRAP
(
di•©chP¨am
 *
∑øm
);

243 
symbﬁCﬁÀ˘_PARAM_TYPE
(
di•©chP¨am
 *
∑øm
);

245 (*
symbﬁCﬁÀ˘Routöe
[
SLICE_TYPE_MAXIMUM
])(
di•©chP¨am
 *);

248 
	$symbﬁCﬁÀ˘ögInô
() {

250 
symbﬁCﬁÀ˘Routöe
[
OBJECT
] = 
symbﬁCﬁÀ˘_BUILD_INNER_NODE
;

251 
symbﬁCﬁÀ˘Routöe
[
TRAP
] = 
symbﬁCﬁÀ˘_BUILD_TRAP
;

252 
symbﬁCﬁÀ˘Routöe
[
OBJECT_IDENTIFIER
] = 
symbﬁCﬁÀ˘_BUILD_LEAVE_NODE
;

253 
symbﬁCﬁÀ˘Routöe
[
SEQUENCE
] = 
symbﬁCﬁÀ˘_BUILD_SEQUENCE
;

254 
symbﬁCﬁÀ˘Routöe
[
SMI_DEF
] = 
symbﬁCﬁÀ˘_BUILD_SMI_DEF
;

257 
symbﬁCﬁÀ˘Routöe
[
SLICE_IDENTIFIER
] = 
symbﬁCﬁÀ˘_PARAM_IDENT
;

258 
symbﬁCﬁÀ˘Routöe
[
SLICE_TYPE
] = 
symbﬁCﬁÀ˘_PARAM_TYPE
;

259 
symbﬁCﬁÀ˘Routöe
[
SLICE_PERMISSION
] = 
symbﬁCﬁÀ˘_PARAM_PERM
;

260 
symbﬁCﬁÀ˘Routöe
[
SLICE_DESCRIPTION
] = 
symbﬁCﬁÀ˘_PARAM_DESC
;

261 
symbﬁCﬁÀ˘Routöe
[
SLICE_PARENT
] = 
symbﬁCﬁÀ˘_PARAM_PARENT
;

262 
symbﬁCﬁÀ˘Routöe
[
SLICE_OID_SUFFIX
] = 
symbﬁCﬁÀ˘_PARAM_SUFFIX
;

265 
	}
}

267 
	$symbﬁCﬁÀ˘ög
(
ty≥
, 
di•©chP¨am
 *
∑øm
) {

271  
symbﬁCﬁÀ˘Routöe
[
ty≥
](
∑øm
);

272 
	}
}

274 
	$symbﬁCﬁÀ˘_BUILD_INNER_NODE
(
di•©chP¨am
 *
∑øm
) {

275 
ªtVÆ
;

276 
symbﬁTabÀ
 *
√wMod
;

277 
cﬁÀ˘Info
 *
pCﬁÀ˘
;

278 
symbﬁ_t
 *
√wSymbﬁ
;

279 
idítLi°
 *
li°Hód
, *
li°Pro˚ssög
;

280 *
modIdít
;

281 *
symbﬁIdít
;

282 *
∑ª¡Idít
 ;

284 
∑ª¡Idít
 = 
	`¶i˚GëVÆ
(&
symCﬁÀ˘Sli˚
, 
SLICE_PARENT
);

285 
symbﬁIdít
 = 
	`¶i˚GëVÆ
(&
symCﬁÀ˘Sli˚
, 
SLICE_IDENTIFIER
);

288 i‡(
	`symbﬁSórchög
(&
symTabÀ
, 
symbﬁIdít
)) {

290 
MOD_STACK_OP_REMOVE
;

293 
modIdít
 = (*)
	`mÆloc
(
MAX_CHAR_OF_MOD_IDENT
);

294 
	`swôch_CuºítMod
(
modIdít
, 
MAX_CHAR_OF_MOD_IDENT
);

295 
∑ª¡Idít
 = 
	`¶i˚GëVÆ
(&
symCﬁÀ˘Sli˚
, 
SLICE_PARENT
);

298 i‡(!
	`symbﬁTabÀSórch
(&
symTabÀ
, 
modIdít
)) {

299 
√wMod
 = (
symbﬁTabÀ
 *)
	`mÆloc
((symbolTable));

300 
√wMod
->
modName
 = 
modIdít
;

301 
	`symbﬁModuÀAdd
(&
symTabÀ
, 
√wMod
);

304 
√wSymbﬁ
 = (
symbﬁ_t
 *)
	`mÆloc
((symbol_t));

305 
√wSymbﬁ
->
symIdít
 = 
symbﬁIdít
;

306 
√wSymbﬁ
->
symTy≥
 = 
SYMBOL_TYPE_NODE
;

307 
√wSymbﬁ
->
symInfo
.
nodeMëa
.
∑ª¡Idít
 =ÖarentIdent;

308 
	`symbﬁAdd
(&
symTabÀ
, 
√wSymbﬁ
, 
√wMod
->
modName
);

310 
MOD_STACK_OP_REMOVE
:

312 
ªtVÆ
 = 
	`rmSymFromIdítLi°
(
	`SW_CUR_IMPORT_REF
(
swSèã
)->
symbﬁs
, 
symbﬁIdít
);

313 
	`¶i˚Rñó£
(&
symCﬁÀ˘Sli˚
);

314  
ªtVÆ
;

315 
	}
}

318 
	$symbﬁCﬁÀ˘_BUILD_TRAP
(
di•©chP¨am
 *
∑øm
) {

319 
ªtVÆ
;

320 *
symbﬁIdít
 = 
	`¶i˚GëVÆ
(&
symCﬁÀ˘Sli˚
, 
SLICE_IDENTIFIER
);

321 
ªtVÆ
 = 
	`rmSymFromIdítLi°
(
	`SW_CUR_IMPORT_REF
(
swSèã
)->
symbﬁs
, 
symbﬁIdít
);

322 
	`¶i˚Rñó£
(&
symCﬁÀ˘Sli˚
);

323  
ªtVÆ
;

324 
	}
}

326 
	$symbﬁCﬁÀ˘_BUILD_LEAVE_NODE
(
di•©chP¨am
 *
∑øm
) {

327 
ªtVÆ
;

328 *
symbﬁIdít
 = 
	`¶i˚GëVÆ
(&
symCﬁÀ˘Sli˚
, 
SLICE_IDENTIFIER
);

329 
ªtVÆ
 = 
	`rmSymFromIdítLi°
(
	`SW_CUR_IMPORT_REF
(
swSèã
)->
symbﬁs
, 
symbﬁIdít
);

330 
	`¶i˚Rñó£
(&
symCﬁÀ˘Sli˚
);

331  
ªtVÆ
;

332 
	}
}

334 
	$symbﬁCﬁÀ˘_BUILD_SEQUENCE
(
di•©chP¨am
 *
∑øm
) {

335 
ªtVÆ
;

336 *
symbﬁIdít
 = 
	`¶i˚GëVÆ
(&
symCﬁÀ˘Sli˚
, 
SLICE_IDENTIFIER
);

337 
ªtVÆ
 = 
	`rmSymFromIdítLi°
(
	`SW_CUR_IMPORT_REF
(
swSèã
)->
symbﬁs
, 
symbﬁIdít
);

338 
	`¶i˚Rñó£
(&
symCﬁÀ˘Sli˚
);

339  
ªtVÆ
;

340 
	}
}

342 
	$symbﬁCﬁÀ˘_BUILD_SMI_DEF
(
di•©chP¨am
 *
∑øm
) {

343 
ªtVÆ
;

344 *
symbﬁIdít
 = 
	`¶i˚GëVÆ
(&
symCﬁÀ˘Sli˚
, 
SLICE_IDENTIFIER
);

345 
ªtVÆ
 = 
	`rmSymFromIdítLi°
(
	`SW_CUR_IMPORT_REF
(
swSèã
)->
symbﬁs
, 
symbﬁIdít
);

346 
	`¶i˚Rñó£
(&
symCﬁÀ˘Sli˚
);

347  
ªtVÆ
;

348 
	}
}

350 
	$symbﬁCﬁÀ˘_PARAM_IDENT
(
di•©chP¨am
 *
∑øm
) {

351 i‡(
	`isNuŒPå
(
∑øm
)) {

355 
	`PARAM_STORE_TO_SYM_LIST
(
SLICE_IDENTIFIER
, 
∑øm
);

357 
	}
}

359 
	$symbﬁCﬁÀ˘_PARAM_TYPE
(
di•©chP¨am
 *
∑øm
) {

361 i‡(
	`isNuŒPå
(
∑øm
)) {

365 
	`PARAM_STORE_TO_SYM_LIST
(
SLICE_TYPE
, 
∑øm
);

367 
	}
}

369 
	$symbﬁCﬁÀ˘_PARAM_PERM
(
di•©chP¨am
 *
∑øm
) {

370 i‡(
	`isNuŒPå
(
∑øm
)) {

374 
	`PARAM_STORE_TO_SYM_LIST
(
SLICE_PERMISSION
, 
∑øm
);

376 
	}
}

378 
	$symbﬁCﬁÀ˘_PARAM_DESC
(
di•©chP¨am
 *
∑øm
) {

379 i‡(
	`isNuŒPå
(
∑øm
)) {

383 
	`PARAM_STORE_TO_SYM_LIST
(
SLICE_DESCRIPTION
, 
∑øm
);

385 
	}
}

387 
	$symbﬁCﬁÀ˘_PARAM_PARENT
(
di•©chP¨am
 *
∑øm
) {

388 i‡(
	`isNuŒPå
(
∑øm
)) {

392 
	`PARAM_STORE_TO_SYM_LIST
(
SLICE_PARENT
, 
∑øm
);

394 
	}
}

396 
	$symbﬁCﬁÀ˘_PARAM_SUFFIX
(
di•©chP¨am
 *
∑øm
) {

397 i‡(
	`isNuŒPå
(
∑øm
)) {

401 
	`PARAM_STORE_TO_SYM_LIST
(
SLICE_OID_SUFFIX
, 
∑øm
);

403 
	}
}

	@src/mibTreeObjTree.c

5 
	~<°ddef.h
>

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

8 
	~"mibTªeObjTªe.h
"

9 
	~"ty≥.h
"

10 
	~"docGíî©e.h
"

11 
	~"utû.h
"

14 
mibObje˘TªeNode
 
	gmibObje˘TªeRoŸ
;

17 
nodeCmp
(*
¨g
, 
mibObje˘TªeNode
 *
node
);

18 
Tªïröt
(*
¨g
, 
mibObje˘TªeNode
 *
node
);

19 
des¸ùti⁄Dól
(
mibObje˘TªeNode
 *
node
);

22 
	#OID_LENGTH
 256

	)

23 
	#IS_NODE_HAS_CHILD_MT
(
node
Ë“ode->
chûd
 ? 1 : 0)

	)

24 
	#IS_NODE_HAS_SIBLING_MT
(
node
Ë“ode->
siblög
 ? 1 : 0)

	)

25 
	#LOWER_CASE
(
C
) ({ \

26 
ªt
; \

27 i‡(
C
 < 97) \

28 
ªt
 = 
C
+32; \

30 
ªt
 = 
C
; \

31 
ªt
; \

32 })

	)

35 
mibObje˘TªeNode
 * 
mibNodeBuûd
(*
idít
, *
oid
);

36 
mibObje˘TªeNode
 * 
mibLóveBuûd
(*
idít
, *
ty≥
, *
rw
, *
desc
, *
oid
);

37 
mibObje˘TªeNode
 * 
åavñ_MibTªe
(mibObje˘TªeNodê*
obj
,

38 (*
func
)(*
¨gu
, 
mibObje˘TªeNode
 *
node
), *
¨g
);

40 
	$mibObje˘TªeInô
(
mibObje˘TªeNode
 *
roŸ
) {

41 
mibNodeInfo
 *
roŸInfo
;

42 
mibObje˘TªeNode
 *
obj
;

44 
	`mem£t
(
roŸ
, 0, (
mibObje˘TªeNode
));

46 
roŸInfo
 = (
mibNodeInfo
 *)
	`mÆloc
((mibNodeInfo));

47 
	`mem£t
(
roŸInfo
, 0, (
mibNodeInfo
));

48 
roŸInfo
->
idít
 = "root";

49 
roŸInfo
->
oid
 = "root";

51 
roŸ
->
isNode
 = 1;

52 
roŸ
->
öfo
 = (*)
roŸInfo
;

53 
roŸ
->
hód
 =Ñoot;

55 
	`ö£π_MibTªe
(
roŸ
, 
	`mibNodeBuûd
("iso", "1"), "root");

56 
	`ö£π_MibTªe
(
roŸ
, 
	`mibNodeBuûd
("org", "1.3"), "iso");

57 
	`ö£π_MibTªe
(
roŸ
, 
	`mibNodeBuûd
("dod", "1.3.6"), "org");

58 
	`ö£π_MibTªe
(
roŸ
, 
	`mibNodeBuûd
("internet", "1.3.6.1"), "dod");

59 
	`ö£π_MibTªe
(
roŸ
, 
	`mibNodeBuûd
("private", "1.3.6.1.4"), "internet");

60 
	`ö£π_MibTªe
(
roŸ
, 
	`mibNodeBuûd
("enterprises", "1.3.6.1.4.1"), "private");

62 
	}
}

64 
mibObje˘TªeNode
 * 
	$mibNodeBuûd
(*
idít
, *
oid
) {

65 
mibObje˘TªeNode
 *
obj
;

66 
mibNodeInfo
 *
öfo
;

68 i‡(
	`isNuŒPå
(
idít
Ë|| isNuŒPå(
oid
))

69  
NULL
;

71 
öfo
 = (
mibNodeInfo
 *)
	`mÆloc
((mibNodeInfo));

72 
	`mem£t
(
öfo
, 0, (
mibNodeInfo
));

74 
öfo
->
idít
 = ident;

75 
öfo
->
oid
 = oid;

77 
obj
 = (
mibObje˘TªeNode
 *)
	`mÆloc
((mibObjectTreeNode));

78 
	`mem£t
(
obj
, 0, (
mibObje˘TªeNode
));

80 
obj
->
idítifõr
 = 
idít
;

81 
obj
->
isNode
 = 1;

82 
obj
->
öfo
 = (*)info;

83  
obj
;

84 
	}
}

86 
mibObje˘TªeNode
 *
	$mibLóveBuûd
(*
idít
, *
ty≥
, *
rw
, *
desc
, *
oid
) {

87 
mibObje˘TªeNode
 *
obj
;

88 
mibLóveInfo
 *
öfo
;

90 i‡(
	`isNuŒPå
(
idít
Ë|| isNuŒPå(
ty≥
Ë|| isNuŒPå(
oid
))

91  
NULL
;

93 
öfo
 = (
mibLóveInfo
 *)
	`mÆloc
((mibLeaveInfo));

94 
	`mem£t
(
öfo
, 0, (
mibLóveInfo
));

95 
öfo
->
nodeInfo
 = (
mibNodeInfo
 *)
	`mÆloc
((mibNodeInfo));

96 
	`mem£t
(
öfo
->
nodeInfo
, 0, (
mibNodeInfo
));

98 
öfo
->
nodeInfo
->
idít
 = ident;

99 
öfo
->
nodeInfo
->
oid
 = oid;

100 
öfo
->
ty≥
 =Åype;

101 
öfo
->
rw
 =Ñw;

102 
öfo
->
dëaû
 = 
desc
;

104 
obj
 = (
mibObje˘TªeNode
 *)
	`mÆloc
((mibObjectTreeNode));

105 
	`mem£t
(
obj
, 0, (
mibObje˘TªeNode
));

106 
obj
->
idítifõr
 = 
idít
;

107 
obj
->
öfo
 = (*)info;

108 
obj
->
isNode
 = 0;

110  
obj
;

111 
	}
}

114 
	$ö£π_MibTªe
(
mibObje˘TªeNode
 *
roŸ
, mibObje˘TªeNodê*
obj
, *
∑ª¡_idít
) {

115 
mibObje˘TªeNode
 *
∑ª¡Node
, *
chûd
, *
cuºít
;

117 i‡(
	`isNuŒPå
(
roŸ
Ë|| isNuŒPå(
obj
Ë|| isNuŒPå(
∑ª¡_idít
))

120 
∑ª¡Node
 = 
	`£¨ch_MibTªe
(
roŸ
, 
∑ª¡_idít
);

122 i‡(
∑ª¡Node
 =
NULL
)

125 
chûd
 = 
∑ª¡Node
->child;

127 i‡(
	`IS_NODE_HAS_CHILD_MT
(
∑ª¡Node
)) {

128 
cuºít
 = 
chûd
; cuºíà!
NULL
; cuºíàcuºít->
siblög
 ) {

129 i‡(
	`IS_NODE_HAS_SIBLING_MT
(
cuºít
)) {

132 
cuºít
->
siblög
 = 
obj
;

133 
obj
->
∑ª¡
 = 
∑ª¡Node
;

134 
obj
->
hód
 = 
chûd
;

135 
MISC
;

138 
∑ª¡Node
->
chûd
 = 
obj
;

139 
obj
->
hód
 = obj;

140 
obj
->
∑ª¡
 = 
∑ª¡Node
;

142 
MISC
:

143 
	`des¸ùti⁄Dól
(
obj
);

145 
	}
}

147 
	$des¸ùti⁄Dól
(
mibObje˘TªeNode
 *
node
) {

149 
i
, 
pos
, 
size
, 
descSize
, 
sumChûd
, 
sumP¨ít
;

150 *
idít
 = 
	`gëIdítFromInfo
(
node
);

151 *
∑ª¡Idít
 = 
	`gëIdítFromInfo
(
node
->
∑ª¡
);

152 
mibLóveInfo
 *
öfo
;

154 i‡(
	`°æí
(
idít
Ë> såÀn(
∑ª¡Idít
))

155 
size
 = 
	`°æí
(
∑ª¡Idít
);

157 
size
 = 
	`°æí
(
idít
);

159 i‡(!
node
->
isNode
 & !
	`èbÀRecognize
(
idít
, 
	`°æí
(ident))) {

160 
öfo
 = 
node
->info;

162 
pos
 = -1;

163 
sumChûd
 = 0;

164 
sumP¨ít
 = 0;

165 
i
=0; i<
size
; i++) {

166 
sumChûd
 +
	`LOWER_CASE
(
idít
[
i
]);

167 
sumP¨ít
 +
	`LOWER_CASE
(
∑ª¡Idít
[
i
]);

169 i‡(
sumChûd
 =
sumP¨ít
) {

170 
pos
 = 
i
;

175 i‡(
pos
 == -1)

178 
size
 = 
	`°æí
(
idít
);

179 
descSize
 = 
size
-(
pos
+1);

181 
öfo
->
desc
 = (*)
	`mÆloc
(
descSize
+1);

182 
	`mem£t
(
öfo
->
desc
, 0, 
descSize
+1);

183 
	`°∫˝y
(
öfo
->
desc
, 
idít
+
pos
+1, 
descSize
);

186 
	}
}

188 
mibObje˘TªeNode
 *
	$∑ª¡_MibTªe
(
mibObje˘TªeNode
 *
roŸ
, *
idít
) {

189 
mibObje˘TªeNode
 *
node
;

191 
node
 = 
	`£¨ch_MibTªe
(
roŸ
, 
idít
);

192 i‡(
node
 !
NULL
)

193  
node
->
∑ª¡
;

195  
NULL
;

196 
	}
}

198 
mibObje˘TªeNode
 * 
	$£¨ch_MibTªe
(
mibObje˘TªeNode
 *
roŸ
, *c⁄° 
idít
) {

199 
mibObje˘TªeNode
 *
èrgë
;

201 
èrgë
 = 
	`åavñ_MibTªe
(
roŸ
, 
nodeCmp
, 
idít
);

203  
èrgë
;

204 
	}
}

206 
	$showTªe
(
mibObje˘TªeNode
 *
roŸ
) {

207 
	`åavñ_MibTªe
(
roŸ
, 
Tªïröt
, 
NULL
);

208 
	}
}

210 
	$Tªïröt
(*
¨g
, 
mibObje˘TªeNode
 *
node
) {

211 
	`¥ötf
("%†: %s", 
	`gëIdítFromInfo
(
node
), 
	`gëOidFromInfo
(node));

212 i‡(!
node
->
isNode
)

213 
	`¥ötf
(" -- %†-- %s\n", ((
mibLóveInfo
 *)
node
->
öfo
)->
ty≥
,

214 ((
mibLóveInfo
 *)
node
->
öfo
)->
dëaû
);

216 
	`¥ötf
("\n");

218 
	}
}

220 
	$nodeCmp
(*
¨g
, 
mibObje˘TªeNode
 *
node
) {

221 *
idít
;

222 *
èrgëIdít
;

223 
size
, 
size1
, 
size2
;

224 
idít
 = 
¨g
;

226 
èrgëIdít
 = 
	`gëIdítFromInfo
(
node
);

227 
size1
 = 
	`°æí
(
idít
);

228 
size2
 = 
	`°æí
(
èrgëIdít
);

230 i‡(
size1
 < 
size2
)

231 
size
 = 
size1
;

233 
size
 = 
size2
;

235 i‡(
	`°∫cmp
(
idít
, 
	`gëIdítFromInfo
(
node
), 
size
) == 0)

239 
	}
}

241 * 
	$gëIdítFromInfo
(
mibObje˘TªeNode
 *
node
) {

242 i‡(
node
->
isNode
)

243  ((
mibNodeInfo
 *)
node
->
öfo
)->
idít
;

245  ((
mibLóveInfo
 *)
node
->
öfo
)->
nodeInfo
->
idít
;

247 
	}
}

249 *
	$gëOidFromInfo
(
mibObje˘TªeNode
 *
node
) {

250 i‡(
node
->
isNode
)

251  ((
mibNodeInfo
 *)
node
->
öfo
)->
oid
;

253  ((
mibLóveInfo
 *)
node
->
öfo
)->
nodeInfo
->
oid
;

255 
	}
}

258 
mibObje˘TªeNode
 * 
åavñ_MibTªe
(mibObje˘TªeNodê*
obj
,

259 (*
func
)(*
¨gu
, 
mibObje˘TªeNode
 *
node
), *
¨g
) {

260 
ªt
;

261 
mibObje˘TªeNode
 *
èrgëC
, *
èrgëS
;

263 i‡(
	`isNuŒPå
(
obj
Ë|| isNuŒPå(
func
))

264  
NULL
;

267 
ªt
 = 
	`func
(
¨g
, 
obj
);

268 i‡(
ªt
 == 1) {

269  
obj
;

272 
èrgëC
 = 
	`åavñ_MibTªe
(
obj
->
chûd
, 
func
, 
¨g
);

273 
èrgëS
 = 
	`åavñ_MibTªe
(
obj
->
siblög
, 
func
, 
¨g
);

275 i‡(
èrgëC
 !
NULL
)

276  
èrgëC
;

278  
èrgëS
;

279 
	}
}

	@src/misc.c

5 
	~"ty≥.h
"

7 
	gmib2docEº‹
;

9 
	$miscInô
() {

10 
mib2docEº‹
 = 0;

12 
	}
}

	@src/options.c

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~"ty≥.h
"

6 
	~"›ti⁄s.h
"

7 
	~"li°.h
"

8 
	~"°rög.h
"

11 
∑ømM≠pög
(*
∑øm
);

12 
m≠pögTabÀInô
();

15 
›ti⁄s_t
 
	g›ti⁄sM™agî
;

18 
	e›ti⁄Numbî
 {

19 
	mSour˚MibFûe
 = 0,

20 
	mT¨gëPdfFûe
,

21 
	mUNIQUE_PARAM
,

22 
	mIn˛udeP©h
,

23 
	mNumOfO±i⁄s


24 } 
	t›ti⁄Numbî
;

26 * 
	gm≠pögTabÀ
[
NumOfO±i⁄s
];

29 
hñpInfoPröt
();

31 
	$›ti⁄sInô
(
¨gc
, *
¨gv
[]) {

32 *
∑øm
;

33 *
∑ømVÆ
;

34 
öcP©hLi°
 *
öcNode
;

35 
i
=0, 
∑ømIndex
 = 0;

37 i‡(
	`isNuŒPå
(
¨gv
)) {

38  
ERROR_NULL_REF
;

41 i‡(
¨gc
 == 1) {

42 
	`hñpInfoPröt
();

43  
ERROR_GENERIC
;

46 
	`m≠pögTabÀInô
();

53 
∑øm
 = 
¨gv
[
i
++]) {

54 i‡((
∑ømIndex
 = 
	`∑ømM≠pög
(
∑øm
)Ë< 
UNIQUE_PARAM
) {

55 i‡(
m≠pögTabÀ
[
∑ømIndex
] =
nuŒ
) {

56  
ERROR_GENERIC
;

59 
	`∑ømM≠pög
(
∑øm
)) {

60 
Sour˚MibFûe
:

61 
∑ømVÆ
 = 
¨gv
[
i
++];

62 
›ti⁄sM™agî
.
sour˚MibFûeP©h
 = 
∑ømVÆ
;

63 
m≠pögTabÀ
[
Sour˚MibFûe
] = 
nuŒ
;

65 
T¨gëPdfFûe
:

66 i‡(
T¨gëPdfFûe
 < 
UNIQUE_PARAM
 && 
›ti⁄sM™agî
.
èrgëPdfPATH
 !
nuŒ
)

67  
ERROR_GENERIC
;

68 
∑ømVÆ
 = 
¨gv
[
i
++];

69 
›ti⁄sM™agî
.
èrgëPdfPATH
 = 
∑ømVÆ
;

70 
m≠pögTabÀ
[
T¨gëPdfFûe
] = 
nuŒ
;

72 
In˛udeP©h
:

73 
∑ømVÆ
 = 
¨gv
[
i
++];

74 
öcNode
 = (
öcP©hLi°
 *)
	`mÆloc
((incPathList));

75 
	`mem£t
(
öcNode
, 0, (
öcP©hLi°
));

76 
öcNode
->
∑th
 = 
∑ømVÆ
;

77 
	`li°NodeAµíd
(&
›ti⁄sM™agî
.
ö˛udeP©h
.
node
, &
öcNode
->node);

80 
	`hñpInfoPröt
();

81  
ERROR_WRONG_IDX
;

84 i‡(
i
 > 
¨gc
-1)

87 
	}
}

89 
	$hñpInfoPröt
(Ë{
	}
}

91 
	$m≠pögTabÀInô
() {

92 
m≠pögTabÀ
[
Sour˚MibFûe
] = "-s";

93 
m≠pögTabÀ
[
T¨gëPdfFûe
] = "-t";

94 
m≠pögTabÀ
[
In˛udeP©h
] = "-I";

97 
	}
}

99 
	$∑ømM≠pög
(*
∑øm
) {

100 
ödex
 = 0;

102 i‡(
	`isNuŒPå
(
∑øm
)) {

103  
ERROR_NULL_REF
;

106 
ödex
 < 
NumOfO±i⁄s
) {

107 i‡(
	`°∫cmp
(
∑øm
, 
m≠pögTabÀ
[
ödex
], 
	`°æí
(param)) == 0) {

110 
ödex
++;

112  
ödex
;

113 
	}
}

115 c⁄° * 
	$gëO±i⁄_Sour˚MibFûeP©h
() {

116  
›ti⁄sM™agî
.
sour˚MibFûeP©h
;

117 
	}
}

119 c⁄° * 
	$gëO±i⁄_èrgëPdfP©h
() {

120  
›ti⁄sM™agî
.
èrgëPdfPATH
;

121 
	}
}

133 c⁄° * 
	$gëO±i⁄_ö˛udeP©h
(*
ödex
) {

134 
i
 = *
ödex
;

135 
öcP©hLi°
 *
hód
;

136 
li°Node
 *
node
;

138 i‡(
	`isNuŒPå
(
ödex
)) {

139  
nuŒ
;

141 i‡(
i
 <= 0) {

142  
nuŒ
;

145 
hód
 = &
›ti⁄sM™agî
.
ö˛udeP©h
;

146 
node
 = &
hód
->node;

148 
i
--) {

149 
node
 = 
	`li°NodeNext
(&
hód
->node);

152 i‡(
node
 =
nuŒ
) {

153  
nuŒ
;

156 
hód
 = 
	`c⁄èöîOf
(
node
, 
öcP©hLi°
,Çode);

158 (*
ödex
)++;

159  (c⁄° *)
hód
->
∑th
;

160 
	}
}

	@src/queue.c

4 
	~"../ö˛ude/queue.h
"

6 
	#Q√xt
(
idx
) ({ \

7 
ªt
 = 
idx
; \

8 i‡(
idx
 =
SIZE_OF_QUEUE
 - 1) { \

9 
ªt
 = 0; \

12 
ªt
++; \

14 
idx
 = 
ªt
; \

15 })

	)

17 
isQueueFuŒ
(
mibNodeInfoQueue
 *
q
);

18 
isQueueEm±y
(
mibNodeInfoQueue
 *
q
);

20 
	$≠≥ndQueue
(
mibNodeInfoQueue
 *
q
, 
èbÀInfo
 *
pD©a
) {

21 i‡(
	`isQueueFuŒ
(
q
))

23 
q
->
èbÀBuf„r
[q->
èû
] = 
pD©a
;

24 
	`Q√xt
(
q
->
èû
);

25 
q
->
cou¡
++;

28 
	}
}

30 
èbÀInfo
 *
	$gëQueue
(
mibNodeInfoQueue
 *
q
) {

31 
èbÀInfo
 *
ªt
;

32 i‡(
	`isQueueEm±y
(
q
))

34 
ªt
 = 
q
->
èbÀBuf„r
[q->
hód
];

35 
	`Q√xt
(
q
->
hód
);

36 
q
->
cou¡
--;

37  
ªt
;

38 
	}
}

40 
	$isQueueFuŒ
(
mibNodeInfoQueue
 *
q
) {

41 
hód
 = 
q
->head;

42 
èû
 = 
q
->tail;

44 i‡(
	`Q√xt
(
èû
Ë=
hód
)

48 
	}
}

50 
	$isQueueEm±y
(
mibNodeInfoQueue
 *
q
) {

51 i‡(
q
->
hód
 =q->
èû
)

55 
	}
}

	@src/stack.c

5 
	~"°ack.h
"

6 
	~"ty≥.h
"

8 
	$gíîicSèckC⁄°ru˘
(
gíîicSèck
 *
gSèck
, 
buf„rSize
, 
unôSize
) {

9 i‡(
	`isNuŒPå
(
gSèck
)) {

12 
gSèck
->
t›
 = 0;

13 
gSèck
->
unôSize
 = unitSize;

14 
gSèck
->
buf„rSize
 = bufferSize;

15 
gSèck
->
buf„r
 = (*)
	`mÆloc
(
buf„rSize
);

16 
gSèck
->
ba£
 = gSèck->
buf„r
 + 
buf„rSize
;

18 
	}
}

20 
	$push
(
gíîicSèck
 *
gSèck
, *
unô
) {

21 i‡(
	`isNuŒPå
(
gSèck
Ë|| isNuŒPå(
unô
))

24 
	`pushByIndex
(
gSèck
->
ba£
, 
unô
, gSèck->
t›
,

25 
gSèck
->
buf„rSize
-1, gSèck->
unôSize
);

27 
	}
}

29 
	$p›
(
gíîicSèck
 *
gSèck
, *
unô
) {

30 
t›
;

32 i‡(
	`isNuŒPå
(
gSèck
Ë|| isNuŒPå(
unô
))

35 
t›
 = 
gSèck
->top;

36 
	`p›ByIndex
(
gSèck
->
ba£
, gSèck->
t›
, 
unô
, gSèck->
unôSize
);

38 
	}
}

	@src/unitTest/basicDataStruct_Test.c

5 
	~<°d¨g.h
>

6 
	~<°ddef.h
>

7 
	~<£tjmp.h
>

8 
	~<cmocka.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~"ty≥.h
"

12 
	~"li°.h
"

13 
	~"mibTªeGí.h
"

14 
	~"queue.h
"

16 
mibObje˘TªeNode
 
	gmibObje˘TªeRoŸ
;

17 
¶i˚
 
	g¶i˚C⁄èöî
;

18 *
	g£˘i⁄Rec‹d
[
SIZE_OF_SECTION_RECORD
];

20 
èbÀRecognize
(*
buf„r
, 
size
);

22 
	$li°_ã°
(**
°©e
) {

23 
¶i˚
 *
√w1
;

24 
¶i˚
 *
√w2
;

25 
¶i˚
 *
gŸ
;

27 
	`mem£t
(&
¶i˚C⁄èöî
, 0, (
¶i˚
));

29 
√w1
 = 
	`¶i˚C⁄°ru˘
(
SLICE_IDENTIFIER
, 
	`°rdup
("LLLL"));

30 
	`¶i˚St‹e
(&
¶i˚C⁄èöî
, 
√w1
);

32 
√w2
 = 
	`¶i˚C⁄°ru˘
(
SLICE_TYPE
, 
	`°rdup
("lllll"));

33 
	`¶i˚St‹e
(&
¶i˚C⁄èöî
, 
√w2
);

35 
gŸ
 = 
	`¶i˚Gë
(&
¶i˚C⁄èöî
, 
SLICE_IDENTIFIER
);

36 i‡–(
gŸ
->
¶iVÆ
 !
√w1
->¶iVÆË|| (gŸ->
¶iKey
 !=Çew1->sliKey))

37 
	`Áû
();

39 
gŸ
 = 
	`¶i˚Gë
(&
¶i˚C⁄èöî
, 
SLICE_TYPE
);

40 i‡–(
gŸ
->
¶iVÆ
 !
√w2
->¶iVÆË|| (gŸ->
¶iKey
 !=Çew2->sliKey))

41 
	`Áû
();

43 
	`¶i˚Rñó£
(&
¶i˚C⁄èöî
);

44 
	`mem£t
(&
¶i˚C⁄èöî
, 0, (
¶i˚
));

45 
	}
}

48 
	$mibTªe_ã°
(**
°©e
) {

49 
mibObje˘TªeNode
 *
pNode
;

50 
mibNodeInfo
 *
öfo
;

51 *
idít
;

52 *
suffix
;

53 *
∑ª¡
;

55 
	`mibObje˘TªeInô
(&
mibObje˘TªeRoŸ
);

56 
idít
 = (*)
	`mÆloc
(
	`°æí
("gogo"));

57 
suffix
 = (*)
	`mÆloc
(
	`°æí
("1"));

58 
∑ª¡
 = (*)
	`mÆloc
(
	`°æí
("enterprises"));

60 
	`°∫˝y
(
idít
, "gogo", 
	`°æí
("gogo"));

61 
	`°∫˝y
(
suffix
, "1", 
	`°æí
("1"));

62 
	`°∫˝y
(
∑ª¡
, "íãΩri£s", 
	`°æí
("enterpises"));

64 
	`¶i˚St‹e
(&
¶i˚C⁄èöî
, 
	`¶i˚C⁄°ru˘
(
SLICE_IDENTIFIER
, 
idít
));

65 
	`¶i˚St‹e
(&
¶i˚C⁄èöî
, 
	`¶i˚C⁄°ru˘
(
SLICE_OID_SUFFIX
, 
suffix
));

66 
	`¶i˚St‹e
(&
¶i˚C⁄èöî
, 
	`¶i˚C⁄°ru˘
(
SLICE_PARENT
, 
∑ª¡
));

68 
	`mibObje˘TªeInô
(&
mibObje˘TªeRoŸ
);

69 
	`mibObjGí_I¬îNode
();

70 
pNode
 = 
	`£¨ch_MibTªe
(&
mibObje˘TªeRoŸ
, "gogo");

71 i‡(
	`°∫cmp
(
pNode
->
idítifõr
, "gogo", 
	`°æí
("gogo")) != 0)

72 
	`Áû
();

73 
	}
}

75 
	$èbÀInfoQueue_ã°
(**
°©e
) {

76 
mibNodeInfoQueue
 
queue
;

77 
èbÀInfo
 *
pInfo
;

79 
	`mem£t
(&
queue
, 0, (
mibNodeInfoQueue
));

81 
èbÀInfo
 
i1
, 
i2
, 
i3
;

83 
i1
.
idítifõr
 = "1";

84 
i1
.
desc
 = "desc1";

85 
i1
.
oid
 = "1";

86 
i1
.
rw
 = "rw1";

87 
i1
.
ty≥
 = "type1";

89 
i2
.
idítifõr
 = "2";

90 
i2
.
desc
 = "desc2";

91 
i2
.
oid
 = "2";

92 
i2
.
rw
 = "rw2";

93 
i2
.
ty≥
 = "type2";

95 
i3
.
idítifõr
 = "3";

96 
i3
.
desc
 = "desc3";

97 
i3
.
oid
 = "3";

98 
i3
.
rw
 = "rw3";

99 
i3
.
ty≥
 = "type3";

101 
	`≠≥ndQueue
(&
queue
, &
i1
);

102 
	`≠≥ndQueue
(&
queue
, &
i2
);

103 
	`≠≥ndQueue
(&
queue
, &
i3
);

105 
pInfo
 = 
	`gëQueue
(&
queue
);

106 i‡(
	`°∫cmp
(
pInfo
->
idítifõr
, 
i1
.idítifõr, 
	`°æí
(i1.identifier)) != 0 ||

107 
	`°∫cmp
(
pInfo
->
desc
, 
i1
.desc, 
	`°æí
(i1.desc)) != 0 ||

108 
	`°∫cmp
(
pInfo
->
oid
, 
i1
.oid, 
	`°æí
(i1.oid)) != 0 ||

109 
	`°∫cmp
(
pInfo
->
rw
, 
i1
.rw, 
	`°æí
(i1.rw)) != 0 ||

110 
	`°∫cmp
(
pInfo
->
ty≥
, 
i1
.ty≥, 
	`°æí
(i1.type)) != 0)

111 
	`Áû
();

113 
pInfo
 = 
	`gëQueue
(&
queue
);

114 i‡(
	`°∫cmp
(
pInfo
->
idítifõr
, 
i2
.idítifõr, 
	`°æí
(i2.identifier)) != 0 ||

115 
	`°∫cmp
(
pInfo
->
desc
, 
i2
.desc, 
	`°æí
(i2.desc)) != 0 ||

116 
	`°∫cmp
(
pInfo
->
oid
, 
i2
.oid, 
	`°æí
(i2.oid)) != 0 ||

117 
	`°∫cmp
(
pInfo
->
rw
, 
i2
.rw, 
	`°æí
(i2.rw)) != 0 ||

118 
	`°∫cmp
(
pInfo
->
ty≥
, 
i2
.ty≥, 
	`°æí
(i2.type)) != 0)

119 
	`Áû
();

121 
pInfo
 = 
	`gëQueue
(&
queue
);

122 i‡(
	`°∫cmp
(
pInfo
->
idítifõr
, 
i3
.idítifõr, 
	`°æí
(i3.identifier)) != 0 ||

123 
	`°∫cmp
(
pInfo
->
desc
, 
i3
.desc, 
	`°æí
(i3.desc)) != 0 ||

124 
	`°∫cmp
(
pInfo
->
oid
, 
i3
.oid, 
	`°æí
(i3.oid)) != 0 ||

125 
	`°∫cmp
(
pInfo
->
rw
, 
i3
.rw, 
	`°æí
(i3.rw)) != 0 ||

126 
	`°∫cmp
(
pInfo
->
ty≥
, 
i3
.ty≥, 
	`°æí
(i3.type)) != 0)

127 
	`Áû
();

128 
	}
}

130 
	$desc_ã°
(** 
°©e
) {

131 *
idít
 = "inactiveLineDeviceType";

132 *
∑ª¡Idít
 = "inactiveLinePrimaryEntry";

133 *
ªsu…
;

134 
sumChûd
, 
sumP¨ít
, 
pos
, 
i
, 
size
;

136 i‡(
	`°æí
(
idít
Ë> såÀn(
∑ª¡Idít
))

137 
size
 = 
	`°æí
(
∑ª¡Idít
);

139 
size
 = 
	`°æí
(
idít
);

141 
pos
 = -1;

142 
sumChûd
 = 0;

143 
sumP¨ít
 = 0;

144 
i
=0; i<
size
; i++) {

145 
sumChûd
 +
idít
[
i
];

146 
sumP¨ít
 +
∑ª¡Idít
[
i
];

148 i‡(
sumChûd
 =
sumP¨ít
) {

149 
pos
 = 
i
;

154 
ªsu…
 = (*)
	`mÆloc
(
pos
+2);

155 
	`mem£t
(
ªsu…
, 0, 
pos
+2);

156 
	`°∫˝y
(
ªsu…
, 
idít
+
pos
+1, 
size
-(pos+1));

157 
	}
}

159 
	$Á_ã°
(**
°©e
) {

160 
ªt
;

161 *
buf„r
 = "inactiveVlanTable";

163 
ªt
 = 
	`èbÀRecognize
(
buf„r
, 
	`°æí
(buffer));

165 i‡(
ªt
 != 1)

166 
	`Áû
();

167 
	}
}

169 
	$disP¨am_ã°
(**
°©e
) {

170 *
IDENTIFIER_S
 = "GOGO";

171 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
((*)
SLICE_PARENT
);

172 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
((*)
IDENTIFIER_S
));

173 i‡(()
	`disP¨amRërive
(&
∑øm
)->∑øm !
SLICE_PARENT
)

174 
	`Áû
();

175 i‡(
	`°∫cmp
(
	`disP¨amRërive
(&
∑øm
)->∑øm, 
IDENTIFIER_S
, 
	`°æí
(IDENTIFIER_S)) != 0)

176 
	`Áû
();

177 
	}
}

179 
	$maö
() {

180 c⁄° 
CMUnôTe°
 
ã°s
[] = {

181 
	`cmocka_unô_ã°
(
li°_ã°
),

182 
	`cmocka_unô_ã°
(
mibTªe_ã°
),

183 
	`cmocka_unô_ã°
(
Á_ã°
),

184 
	`cmocka_unô_ã°
(
èbÀInfoQueue_ã°
),

185 
	`cmocka_unô_ã°
(
desc_ã°
),

186 
	`cmocka_unô_ã°
(
disP¨am_ã°
)

188  
	`cmocka_run_group_ã°s
(
ã°s
, 
NULL
, NULL);

189 
	}
}

	@src/util.c

3 
	~"utû.h
"

5 
	$°rögToIdítLi°
(*
°r
, 
idítLi°
 *
li°
, 
£≥øt‹
) {

6 íum { 
idítRecognize
, 
idítTøckög
 };

7 
ödex
 = 0, 
ödex_
 = 0, 
Êag
 = 
idítRecognize
,

8 
begöPoöt
[256] = { 0 };

9 *
°rC›y
 = 
nuŒ
;

10 
idítLi°
 *
li°Tmp
;

12 i‡(
	`isNuŒPå
(
°r
Ë|| isNuŒPå(
li°
)) {

13  
ERROR_NULL_REF
;

16 
°rC›y
 = 
	`°rdup
(
°r
);

17 i‡(
°rC›y
 =
nuŒ
) {

21 
begöPoöt
[
ödex_
++] = 0;

22 
°rC›y
[
ödex
] !
nuŒ
) {

23 i‡(
Êag
 =
idítRecognize
 && 
°rC›y
[
ödex
] =
£≥øt‹
) {

24 
°rC›y
[
ödex
] = 
nuŒ
;

25 
Êag
 = 
idítTøckög
;

26 
ödex
++;

27 } i‡(
Êag
 =
idítTøckög
 && 
°rC›y
[
ödex
] =
cS∑˚
) {

28 
ödex
++;

30 
begöPoöt
[
ödex_
++] = 
ödex
;

31 
Êag
 = 
idítRecognize
;

35 
ödex
 = 0;

36 
ödex_
-- > 0) {

37 
li°Tmp
 = (
idítLi°
 *)
	`mÆloc
((identList));

38 
	`mem£t
(
li°Tmp
, 
nuŒ
, (
idítLi°
));

39 
li°Tmp
->
symName
 = &
°rC›y
[
begöPoöt
[
ödex
]];

40 
li°
->
node
.
√xt
 = &
li°Tmp
->node;

41 
ödex
++;

44  
ERROR_NONE
;

45 
	}
}

47 
	$èbÀRecognize
(*
buf„r
, 
size
) {

48 
ªt
, 
ödex
;

49 
cuºít
;

51 
S_öô
:

52 
ödex
 = -1;

53 
ªt
 = -1;

54 
S_0
;

56 
S_0
:

57 i‡(
ödex
 < 
size
)

58 
ödex
++;

60 
S_out
;

62 
cuºít
 = 
buf„r
[
ödex
];

64 i‡(
cuºít
 == 'T')

65 
S_1
;

67 
S_0
;

69 
S_1
:

70 i‡(
ödex
 < 
size
)

71 
ödex
++;

73 
S_out
;

75 
cuºít
 = 
buf„r
[
ödex
];

77 i‡(
cuºít
 == 'a')

78 
S_2
;

80 
S_0
;

82 
S_2
:

83 i‡(
ödex
 < 
size
)

84 
ödex
++;

86 
S_out
;

88 
cuºít
 = 
buf„r
[
ödex
];

90 i‡(
cuºít
 == 'b')

91 
S_3
;

93 
S_0
;

95 
S_3
:

96 i‡(
ödex
 < 
size
)

97 
ödex
++;

99 
S_out
;

101 
cuºít
 = 
buf„r
[
ödex
];

103 i‡(
cuºít
 == 'l')

104 
S_4
;

106 
S_0
;

108 
S_4
:

109 i‡(
ödex
 < 
size
)

110 
ödex
++;

112 
S_out
;

114 
cuºít
 = 
buf„r
[
ödex
];

116 i‡(
cuºít
 == 'e')

117 
S_ac˚±
;

119 
S_0
;

121 
S_ac˚±
:

122 
ªt
 = 1;

123 
S_föished
;

125 
S_out
:

126 
ªt
 = 0;

128 
S_föished
:

129  
ªt
;

130 
	}
}

132 
	$íåyRecognize
(*
buf„r
, 
size
) {

133 
ªt
, 
ödex
;

134 
cuºít
;

136 
S_öô
:

137 
ödex
 = -1;

138 
ªt
 = -1;

139 
S_0
;

141 
S_0
:

142 i‡(
ödex
 < 
size
)

143 
ödex
++;

145 
S_out
;

147 
cuºít
 = 
buf„r
[
ödex
];

149 i‡(
cuºít
 == 'E')

150 
S_1
;

152 
S_0
;

154 
S_1
:

155 i‡(
ödex
 < 
size
)

156 
ödex
++;

158 
S_out
;

160 
cuºít
 = 
buf„r
[
ödex
];

162 i‡(
cuºít
 == 'n')

163 
S_2
;

165 
S_0
;

167 
S_2
:

168 i‡(
ödex
 < 
size
)

169 
ödex
++;

171 
S_out
;

173 
cuºít
 = 
buf„r
[
ödex
];

175 i‡(
cuºít
 == 't')

176 
S_3
;

178 
S_0
;

180 
S_3
:

181 i‡(
ödex
 < 
size
)

182 
ödex
++;

184 
S_out
;

186 
cuºít
 = 
buf„r
[
ödex
];

188 i‡(
cuºít
 == 'r')

189 
S_4
;

191 
S_0
;

193 
S_4
:

194 i‡(
ödex
 < 
size
)

195 
ödex
++;

197 
S_out
;

199 
cuºít
 = 
buf„r
[
ödex
];

201 i‡(
cuºít
 == 'y')

202 
S_ac˚±
;

204 
S_0
;

206 
S_ac˚±
:

207 
ªt
 = 1;

208 
S_föished
;

210 
S_out
:

211 
ªt
 = 0;

213 
S_föished
:

214  
ªt
;

215 
	}
}

	@src/yy_lex.l

1 %
›ti⁄
 
hódî
-
fûe
="include/lexer.h"

2 %
›ti⁄
 
outfûe
="src/lexer.c"

5 
	~"yy_syn.èb.h
"

6 
	~"ÀxDól.h
"

9 %% /* 
	$yyÀx
 */

10 [\
n
 ]+

11 [\
t
 ]+

13 
OBJECT
[ \
n
\
t
\
r
]+
IDENTIFIER
 {  
OBJ_IDEN_
; }

14 
OBJECT
-
TYPE
 {  
OBJ_SPECIFIER
; }

15 
OBJECTS
 {  
OBJECTS_
; }

16 
NOTIFICATION
-
TYPE
 {  
TRAP_SPECIFIER
; }

17 
SYNTAX
 {  
SYNTAX_SPECIFIER
; }

19 
	`INTEGER
([ \
n
\
t
\
r
]*\(*.*\))* |

20 
IpAddªss
 |

21 
MacAddªss
 |

22 
OCTET
[ \
n
\
t
\
r
]+
	`STRING
([ \n\t\r]*\(.*\))* |

23 
SEQUENCE
[ \
n
\
t
\
r
]+
OF
[ \n\t\r]*[
a
-
zA
-
Z
]* |

24 
RowSètus
 { 
yylvÆ
 = 
	`°rDu∂iˇã
(
yyãxt
);  
TYPE
; }

26 
SEQUENCE
 {  
SEQ
; }

28 
INDEX
 {  
INDEX_
; }

29 
MAX
-
ACCESS
 {  
ACCESS_SPECIFIER
; }

30 
DEFINITIONS
 {  
DEF
; }

31 
BEGIN
 {  
BEGIN_
; }

32 
IMPORTS
 {  
IMPORTS_
; }

33 
FROM
 {  
FROM_
; }

34 \, {  
COMMA
; }

35 \; {  
SEMICOLON
; }

36 
END
 {  
END_
; }

38 
ªad
-
⁄ly
 |

39 
wrôe
 |

40 
ªad
-
wrôe
 |

41 
ac˚ssibÀ
--
nŸify
 |

42 
nŸ
-
ac˚ssibÀ
 { 
yylvÆ
 = 
	`°rDu∂iˇã
(
yyãxt
);  
ACCESS_VALUE
; }

44 
STATUS
 {  
STATUS_SPECIFIER
; }

45 
cuºít
 {  
STATUS_VALUE
; }

46 
DESCRIPTION
 {  
DESC_SPECIFIER
; }

48 ::{  
ASSIGNED
; }

50 \{ {  
L_BRACE
; }

51 \} {  
R_BRACE
; }

53 [0-9]+ { 
yylvÆ
 = 
	`°rDu∂iˇã
(
yyãxt
);  
NUM
; }

55 ([
a
-
zA
-
Z0
-9]|"-")+ { 
yylvÆ
 = 
	`°rDu∂iˇã
(
yyãxt
);  
IDENTIFIER
; }

57 
	}
%%

58 
	$yywøp
() {

60 
	}
}

62 
YY_BUFFER_STATE
 
	$gëCuºítBuf„rSèã
() {

63  
YY_CURRENT_BUFFER
;

64 
	}
}

	@src/yy_syn.tab.c

44 
	#YYBISON
 1

	)

47 
	#YYBISON_VERSION
 "3.0.5"

	)

50 
	#YYSKELETON_NAME
 "yacc.c"

	)

53 
	#YYPURE
 0

	)

56 
	#YYPUSH
 0

	)

59 
	#YYPULL
 1

	)

64 
	~<°dio.h
>

65 
	~"ty≥.h
"

66 
	~"mibTªeGí.h
"

67 
	~"mibTªeObjTªe.h
"

68 
	~"di•©chî.h
"

69 
	~"symbﬁTbl.h
"

70 
	#YYSTYPE
 *

	)

72 
symbﬁTabÀ
 
symTabÀ
;

73 *
yylvÆ
;

74 
	$yyîr‹
(c⁄° *
s
) {

75 
	`Ârötf
(
°dîr
, "%s: %s\n", 
s
, 
yylvÆ
);

76 
	}
}

86 #i‚de‡
YY_NULLPTR


87 #i‡
deföed
 
__˝lu•lus
 && 201103L <= __cplusplus

88 
	#YY_NULLPTR
 
nuŒ±r


	)

90 
	#YY_NULLPTR
 0

	)

95 #ifde‡
YYERROR_VERBOSE


96 #unde‡
YYERROR_VERBOSE


97 
	#YYERROR_VERBOSE
 1

	)

99 
	#YYERROR_VERBOSE
 0

	)

104 #i‚de‡
YY_YY_HOME_AYDENLIN_PROJECTS_MIB2DOC_SRC_YY_SYN_TAB_H_INCLUDED


105 
	#YY_YY_HOME_AYDENLIN_PROJECTS_MIB2DOC_SRC_YY_SYN_TAB_H_INCLUDED


	)

107 #i‚de‡
YYDEBUG


108 
	#YYDEBUG
 0

	)

110 #i‡
YYDEBUG


111 
yydebug
;

115 #i‚de‡
YYTOKENTYPE


116 
	#YYTOKENTYPE


	)

117 
	eyytokíty≥


119 
	mIDENTIFIER
 = 258,

120 
	mOBJ_SPECIFIER
 = 259,

121 
	mSYNTAX_SPECIFIER
 = 260,

122 
	mACCESS_SPECIFIER
 = 261,

123 
	mACCESS_VALUE
 = 262,

124 
	mSTATUS_SPECIFIER
 = 263,

125 
	mSTATUS_VALUE
 = 264,

126 
	mDESC_SPECIFIER
 = 265,

127 
	mDESC_VALUE
 = 266,

128 
	mMOUNT_POINT
 = 267,

129 
	mASSIGNED
 = 268,

130 
	mBEGIN_
 = 269,

131 
	mEND_
 = 270,

132 
	mDEF
 = 271,

133 
	mSEQ
 = 272,

134 
	mCOMMA
 = 273,

135 
	mSEMICOLON
 = 274,

136 
	mINDEX_
 = 275,

137 
	mTRAP_SPECIFIER
 = 276,

138 
	mOBJ_IDEN_
 = 277,

139 
	mL_BRACE
 = 278,

140 
	mR_BRACE
 = 279,

141 
	mOBJECTS_
 = 280,

142 
	mTYPE
 = 281,

143 
	mNUM
 = 282,

144 
	mFROM_
 = 283,

145 
	mIMPORTS_
 = 284

150 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


151 
	tYYSTYPE
;

152 
	#YYSTYPE_IS_TRIVIAL
 1

	)

153 
	#YYSTYPE_IS_DECLARED
 1

	)

157 
YYSTYPE
 
yylvÆ
;

159 
yy∑r£
 ();

171 #ifde‡
YYTYPE_UINT8


172 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

174 
	tyyty≥_uöt8
;

177 #ifde‡
YYTYPE_INT8


178 
YYTYPE_INT8
 
	tyyty≥_öt8
;

180 sig√d 
	tyyty≥_öt8
;

183 #ifde‡
YYTYPE_UINT16


184 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

186 
	tyyty≥_uöt16
;

189 #ifde‡
YYTYPE_INT16


190 
YYTYPE_INT16
 
	tyyty≥_öt16
;

192 
	tyyty≥_öt16
;

195 #i‚de‡
YYSIZE_T


196 #ifde‡
__SIZE_TYPE__


197 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

198 #ñi‡
deföed
 
size_t


199 
	#YYSIZE_T
 
size_t


	)

200 #ñi‡! 
deföed
 
YYSIZE_T


201 
	~<°ddef.h
>

202 
	#YYSIZE_T
 
size_t


	)

204 
	#YYSIZE_T
 

	)

208 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

210 #i‚de‡
YY_


211 #i‡
deföed
 
YYENABLE_NLS
 && YYENABLE_NLS

212 #i‡
ENABLE_NLS


213 
	~<liböé.h
>

214 
	#YY_
(
Msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", Msgid)

	)

217 #i‚de‡
YY_


218 
	#YY_
(
Msgid
Ë
	)
Msgid

222 #i‚de‡
YY_ATTRIBUTE


223 #i‡(
deföed
 
__GNUC__
 \

224 && (2 < 
	g__GNUC__
 || (__GNUC__ =2 && 96 <
__GNUC_MINOR__
))) \

225 || 
deföed
 
__SUNPRO_C
 && 0x5110 <= __SUNPRO_C

226 
	#YY_ATTRIBUTE
(
S≥c
Ë
	`__©åibuã__
(S≥c)

	)

228 
	#YY_ATTRIBUTE
(
S≥c
Ë

	)

232 #i‚de‡
YY_ATTRIBUTE_PURE


233 
	#YY_ATTRIBUTE_PURE
 
	`YY_ATTRIBUTE
 ((
__puª__
))

	)

236 #i‚de‡
YY_ATTRIBUTE_UNUSED


237 
	#YY_ATTRIBUTE_UNUSED
 
	`YY_ATTRIBUTE
 ((
__unu£d__
))

	)

240 #i‡!
deföed
 
_N‹ëu∫
 \

241 && (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 201112)

242 #i‡
deföed
 
_MSC_VER
 && 1200 <= _MSC_VER

243 
	#_N‹ëu∫
 
	`__de˛•ec
 (
n‹ëu∫
)

	)

245 
	#_N‹ëu∫
 
	`YY_ATTRIBUTE
 ((
__n‹ëu∫__
))

	)

250 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


251 
	#YYUSE
(
E
Ë((Ë(E))

	)

253 
	#YYUSE
(
E
Ë

	)

256 #i‡
deföed
 
__GNUC__
 && 407 <__GNUC__ * 100 + 
__GNUC_MINOR__


258 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
 \

259 
	`_Pøgma
 ("GCC diagnosticÖush") \

260 
	`_Pøgma
 ("GCC diagnostic ignored \"-Wuninitialized\"")\

261 
	`_Pøgma
 ("GCC dügno°i¯ign‹ed \"-Wmaybe-unöôülized\"")

	)

262 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END
 \

263 
	`_Pøgma
 ("GCC dügno°i¯p›")

	)

265 
	#YY_INITIAL_VALUE
(
VÆue
Ë
	)
Value

267 #i‚de‡
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


268 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


	)

269 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END


	)

271 #i‚de‡
YY_INITIAL_VALUE


272 
	#YY_INITIAL_VALUE
(
VÆue
Ë

	)

276 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


280 #ifde‡
YYSTACK_USE_ALLOCA


281 #i‡
YYSTACK_USE_ALLOCA


282 #ifde‡
__GNUC__


283 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

284 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


285 
	~<Æloˇ.h
>

286 #ñi‡
deföed
 
_AIX


287 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

288 #ñi‡
deföed
 
_MSC_VER


289 
	~<mÆloc.h
>

290 
	#Æloˇ
 
_Æloˇ


	)

292 
	#YYSTACK_ALLOC
 
Æloˇ


	)

293 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
EXIT_SUCCESS


294 
	~<°dlib.h
>

296 #i‚de‡
EXIT_SUCCESS


297 
	#EXIT_SUCCESS
 0

	)

304 #ifde‡
YYSTACK_ALLOC


306 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 0)

	)

307 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


312 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

315 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

316 
	#YYSTACK_FREE
 
YYFREE


	)

317 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


318 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

320 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
EXIT_SUCCESS
 \

321 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

322 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

323 
	~<°dlib.h
>

324 #i‚de‡
EXIT_SUCCESS


325 
	#EXIT_SUCCESS
 0

	)

328 #i‚de‡
YYMALLOC


329 
	#YYMALLOC
 
mÆloc


	)

330 #i‡! 
deföed
 
mÆloc
 && ! deföed 
EXIT_SUCCESS


331 *
mÆloc
 (
YYSIZE_T
);

334 #i‚de‡
YYFREE


335 
	#YYFREE
 
‰ì


	)

336 #i‡! 
deföed
 
‰ì
 && ! deföed 
EXIT_SUCCESS


337 
‰ì
 (*);

344 #i‡(! 
deföed
 
yyovîÊow
 \

345 && (! 
deföed
 
	g__˝lu•lus
 \

346 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

349 
	uyyÆloc


351 
yyty≥_öt16
 
	myyss_Æloc
;

352 
YYSTYPE
 
	myyvs_Æloc
;

356 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

360 
	#YYSTACK_BYTES
(
N
) \

361 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

362 + 
YYSTACK_GAP_MAXIMUM
)

	)

364 
	#YYCOPY_NEEDED
 1

	)

371 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

374 
YYSIZE_T
 
yy√wbyãs
; \

375 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

376 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

377 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

378 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

380 0)

	)

384 #i‡
deföed
 
YYCOPY_NEEDED
 && YYCOPY_NEEDED

387 #i‚de‡
YYCOPY


388 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

389 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

390 
	`__buûtö_mem˝y
 (
D°
, 
Src
, (
Cou¡
Ë*  (*(Src)))

	)

392 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

395 
YYSIZE_T
 
yyi
; \

396 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

397 (
D°
)[
yyi
] = (
Src
)[yyi]; \

399 0)

	)

405 
	#YYFINAL
 5

	)

407 
	#YYLAST
 76

	)

410 
	#YYNTOKENS
 31

	)

412 
	#YYNNTS
 28

	)

414 
	#YYNRULES
 47

	)

416 
	#YYNSTATES
 100

	)

420 
	#YYUNDEFTOK
 2

	)

421 
	#YYMAXUTOK
 285

	)

423 
	#YYTRANSLATE
(
YYX
) \

424 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

428 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

461 #i‡
YYDEBUG


463 c⁄° 
yyty≥_uöt8
 
	gyyæöe
[] =

473 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 0

476 c⁄° *c⁄° 
	gyyäame
[] =

488 "DESCRIPTION", "INDEX", "INDEX_ITEM", "MOUNT", 
YY_NULLPTR


492 #ifde‡
YYPRINT


495 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

504 
	#YYPACT_NINF
 -37

	)

506 
	#yy∑˘_vÆue_is_deÁu…
(
Yy°©e
) \

507 (!!((
Yy°©e
Ë=(-37)))

	)

509 
	#YYTABLE_NINF
 -16

	)

511 
	#yyèbÀ_vÆue_is_îr‹
(
YyèbÀ_vÆue
) \

512 0

	)

516 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

533 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

548 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

556 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

566 c⁄° 
yyty≥_öt8
 
	gyyèbÀ
[] =

578 c⁄° 
yyty≥_öt8
 
	gyycheck
[] =

592 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

607 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

617 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

627 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

628 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

629 
	#YYEMPTY
 (-2)

	)

630 
	#YYEOF
 0

	)

632 
	#YYACCEPT
 
yyac˚±œb


	)

633 
	#YYABORT
 
yyab‹éab


	)

634 
	#YYERROR
 
yyîr‹œb


	)

637 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

639 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

641 i‡(
yych¨
 =
YYEMPTY
) \

643 
yych¨
 = (
Tokí
); \

644 
yylvÆ
 = (
VÆue
); \

645 
	`YYPOPSTACK
 (
yyÀn
); \

646 
yy°©e
 = *
yys•
; \

647 
yybackup
; \

651 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

652 
YYERROR
; \

654 0)

	)

657 
	#YYTERROR
 1

	)

658 
	#YYERRCODE
 256

	)

663 #i‡
YYDEBUG


665 #i‚de‡
YYFPRINTF


666 
	~<°dio.h
>

667 
	#YYFPRINTF
 
Ârötf


	)

670 
	#YYDPRINTF
(
Args
) \

672 i‡(
yydebug
) \

673 
YYFPRINTF
 
Args
; \

674 } 0)

	)

677 #i‚de‡
YY_LOCATION_PRINT


678 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

682 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

684 i‡(
yydebug
) \

686 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

687 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

688 
Ty≥
, 
VÆue
); \

689 
	`YYFPRINTF
 (
°dîr
, "\n"); \

691 } 0)

	)

699 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

701 
FILE
 *
yyo
 = 
yyouçut
;

702 
	`YYUSE
 (
yyo
);

703 i‡(!
yyvÆuï
)

705 #ifde‡
YYPRINT


706 i‡(
yyty≥
 < 
YYNTOKENS
)

707 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

709 
	`YYUSE
 (
yyty≥
);

710 
	}
}

718 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

720 
	`YYFPRINTF
 (
yyouçut
, "%s %s (",

721 
yyty≥
 < 
YYNTOKENS
 ? "tokí" : "¡îm", 
yyäame
[yytype]);

723 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

724 
	`YYFPRINTF
 (
yyouçut
, ")");

725 
	}
}

733 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

735 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

736 ; 
yybŸtom
 <
yyt›
; yybottom++)

738 
yybŸ
 = *
yybŸtom
;

739 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

741 
	`YYFPRINTF
 (
°dîr
, "\n");

742 
	}
}

744 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

746 i‡(
yydebug
) \

747 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

748 } 0)

	)

756 
	$yy_ªdu˚_¥öt
 (
yyty≥_öt16
 *
yys•
, 
YYSTYPE
 *
yyv•
, 
yyruÀ
)

758 
yy o
 = 
yyæöe
[
yyruÀ
];

759 
yyƒhs
 = 
yyr2
[
yyruÀ
];

760 
yyi
;

761 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

762 
yyruÀ
 - 1, 
yy o
);

764 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

766 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

767 
	`yy_symbﬁ_¥öt
 (
°dîr
,

768 
yy°os
[
yys•
[
yyi
 + 1 - 
yyƒhs
]],

769 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

771 
	`YYFPRINTF
 (
°dîr
, "\n");

773 
	}
}

775 
	#YY_REDUCE_PRINT
(
RuÀ
) \

777 i‡(
yydebug
) \

778 
	`yy_ªdu˚_¥öt
 (
yys•
, 
yyv•
, 
RuÀ
); \

779 } 0)

	)

783 
	gyydebug
;

785 
	#YYDPRINTF
(
Args
)

	)

786 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

787 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

788 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

793 #i‚de‡
YYINITDEPTH


794 
	#YYINITDEPTH
 200

	)

804 #i‚de‡
YYMAXDEPTH


805 
	#YYMAXDEPTH
 10000

	)

809 #i‡
YYERROR_VERBOSE


811 #i‚de‡
yy°æí


812 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


813 
	#yy°æí
 
°æí


	)

816 
YYSIZE_T


817 
	$yy°æí
 (c⁄° *
yy°r
)

819 
YYSIZE_T
 
yyÀn
;

820 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

822  
yyÀn
;

823 
	}
}

827 #i‚de‡
yy°p˝y


828 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


829 
	#yy°p˝y
 
°p˝y


	)

834 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

836 *
yyd
 = 
yyde°
;

837 c⁄° *
yys
 = 
yy§c
;

839 (*
yyd
++ = *
yys
++) != '\0')

842  
yyd
 - 1;

843 
	}
}

847 #i‚de‡
yyäamîr


855 
YYSIZE_T


856 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

858 i‡(*
yy°r
 == '"')

860 
YYSIZE_T
 
yyn
 = 0;

861 c⁄° *
yyp
 = 
yy°r
;

864 *++
yyp
)

868 
do_nŸ_°rù_quŸes
;

871 i‡(*++
yyp
 != '\\')

872 
do_nŸ_°rù_quŸes
;

875 i‡(
yyªs
)

876 
yyªs
[
yyn
] = *
yyp
;

877 
yyn
++;

881 i‡(
yyªs
)

882 
yyªs
[
yyn
] = '\0';

883  
yyn
;

885 
do_nŸ_°rù_quŸes
: ;

888 i‡(! 
yyªs
)

889  
	`yy°æí
 (
yy°r
);

891  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

892 
	}
}

904 
	$yysy¡ax_îr‹
 (
YYSIZE_T
 *
yymsg_Æloc
, **
yymsg
,

905 
yyty≥_öt16
 *
yys•
, 
yytokí
)

907 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yytokí
]);

908 
YYSIZE_T
 
yysize
 = 
yysize0
;

909 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

911 c⁄° *
yyf‹m©
 = 
YY_NULLPTR
;

913 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

916 
yycou¡
 = 0;

941 i‡(
yytokí
 !
YYEMPTY
)

943 
yyn
 = 
yy∑˘
[*
yys•
];

944 
yy¨g
[
yycou¡
++] = 
yyäame
[
yytokí
];

945 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

950 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

952 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

953 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

954 
yyx
;

956 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

957 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR


958 && !
	`yyèbÀ_vÆue_is_îr‹
 (
yyèbÀ
[
yyx
 + 
yyn
]))

960 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

962 
yycou¡
 = 1;

963 
yysize
 = 
yysize0
;

966 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

968 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yyx
]);

969 i‡(! (
yysize
 <
yysize1


970 && 
yysize1
 <
YYSTACK_ALLOC_MAXIMUM
))

972 
yysize
 = 
yysize1
;

978 
yycou¡
)

980 
	#YYCASE_
(
N
, 
S
) \

981 
N
: \

982 
yyf‹m©
 = 
S
; \

983 

	)

985 
	`YYCASE_
(0, 
	`YY_
("syntaxÉrror"));

986 
	`YYCASE_
(1, 
	`YY_
("syntaxÉrror, unexpected %s"));

987 
	`YYCASE_
(2, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s"));

988 
	`YYCASE_
(3, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s"));

989 
	`YYCASE_
(4, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s"));

990 
	`YYCASE_
(5, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s"));

991 #unde‡
YYCASE_


995 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf‹m©
);

996 i‡(! (
yysize
 <
yysize1
 && yysize1 <
YYSTACK_ALLOC_MAXIMUM
))

998 
yysize
 = 
yysize1
;

1001 i‡(*
yymsg_Æloc
 < 
yysize
)

1003 *
yymsg_Æloc
 = 2 * 
yysize
;

1004 i‡(! (
yysize
 <*
yymsg_Æloc


1005 && *
yymsg_Æloc
 <
YYSTACK_ALLOC_MAXIMUM
))

1006 *
yymsg_Æloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

1014 *
yyp
 = *
yymsg
;

1015 
yyi
 = 0;

1016 (*
yyp
 = *
yyf‹m©
) != '\0')

1017 i‡(*
yyp
 ='%' && 
yyf‹m©
[1] ='s' && 
yyi
 < 
yycou¡
)

1019 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1020 
yyf‹m©
 += 2;

1024 
yyp
++;

1025 
yyf‹m©
++;

1029 
	}
}

1037 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1039 
	`YYUSE
 (
yyvÆuï
);

1040 i‡(!
yymsg
)

1041 
yymsg
 = "Deleting";

1042 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1044 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1045 
	`YYUSE
 (
yyty≥
);

1046 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1047 
	}
}

1053 
	gyych¨
;

1056 
YYSTYPE
 
	gyylvÆ
;

1058 
	gyy√ºs
;

1066 
	$yy∑r£
 ()

1068 
yy°©e
;

1070 
yyîr°©us
;

1080 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1081 
yyty≥_öt16
 *
yyss
;

1082 
yyty≥_öt16
 *
yys•
;

1085 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1086 
YYSTYPE
 *
yyvs
;

1087 
YYSTYPE
 *
yyv•
;

1089 
YYSIZE_T
 
yy°acksize
;

1091 
yyn
;

1092 
yyªsu…
;

1094 
yytokí
 = 0;

1097 
YYSTYPE
 
yyvÆ
;

1099 #i‡
YYERROR_VERBOSE


1101 
yymsgbuf
[128];

1102 *
yymsg
 = 
yymsgbuf
;

1103 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1106 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1110 
yyÀn
 = 0;

1112 
yys•
 = 
yyss
 = 
yysß
;

1113 
yyv•
 = 
yyvs
 = 
yyvß
;

1114 
yy°acksize
 = 
YYINITDEPTH
;

1116 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1118 
yy°©e
 = 0;

1119 
yyîr°©us
 = 0;

1120 
yy√ºs
 = 0;

1121 
yych¨
 = 
YYEMPTY
;

1122 
yy£t°©e
;

1127 
yy√w°©e
:

1130 
yys•
++;

1132 
yy£t°©e
:

1133 *
yys•
 = 
yy°©e
;

1135 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1138 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1140 #ifde‡
yyovîÊow


1145 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1146 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1152 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1153 &
yyss1
, 
yysize
 *  (*
yys•
),

1154 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1155 &
yy°acksize
);

1157 
yyss
 = 
yyss1
;

1158 
yyvs
 = 
yyvs1
;

1161 #i‚de‡
YYSTACK_RELOCATE


1162 
yyexhau°edœb
;

1165 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1166 
yyexhau°edœb
;

1167 
yy°acksize
 *= 2;

1168 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1169 
yy°acksize
 = 
YYMAXDEPTH
;

1172 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1173 
yyÆloc
 *
yy±r
 =

1174 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1175 i‡(! 
yy±r
)

1176 
yyexhau°edœb
;

1177 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1178 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1179 #unde‡
YYSTACK_RELOCATE


1180 i‡(
yyss1
 !
yysß
)

1181 
	`YYSTACK_FREE
 (
yyss1
);

1186 
yys•
 = 
yyss
 + 
yysize
 - 1;

1187 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1189 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1190 (Ë
yy°acksize
));

1192 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1193 
YYABORT
;

1196 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1198 i‡(
yy°©e
 =
YYFINAL
)

1199 
YYACCEPT
;

1201 
yybackup
;

1206 
yybackup
:

1212 
yyn
 = 
yy∑˘
[
yy°©e
];

1213 i‡(
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1214 
yydeÁu…
;

1219 i‡(
yych¨
 =
YYEMPTY
)

1221 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1222 
yych¨
 = 
	`yyÀx
 ();

1225 i‡(
yych¨
 <
YYEOF
)

1227 
yych¨
 = 
yytokí
 = 
YYEOF
;

1228 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1232 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1233 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1238 
yyn
 +
yytokí
;

1239 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1240 
yydeÁu…
;

1241 
yyn
 = 
yyèbÀ
[yyn];

1242 i‡(
yyn
 <= 0)

1244 i‡(
	`yyèbÀ_vÆue_is_îr‹
 (
yyn
))

1245 
yyîæab
;

1246 
yyn
 = -yyn;

1247 
yyªdu˚
;

1252 i‡(
yyîr°©us
)

1253 
yyîr°©us
--;

1256 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1259 
yych¨
 = 
YYEMPTY
;

1261 
yy°©e
 = 
yyn
;

1262 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1263 *++
yyv•
 = 
yylvÆ
;

1264 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1266 
yy√w°©e
;

1272 
yydeÁu…
:

1273 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1274 i‡(
yyn
 == 0)

1275 
yyîæab
;

1276 
yyªdu˚
;

1282 
yyªdu˚
:

1284 
yyÀn
 = 
yyr2
[
yyn
];

1294 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1297 
	`YY_REDUCE_PRINT
 (
yyn
);

1298 
yyn
)

1304 i‡(
swSèã
.
cou¡î
 == 0) {

1317 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
((
yyv•
[-1]));

1331 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_IDENTIFIER
);

1332 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
((
yyv•
[0])));

1334 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

1335 
	`di•©ch
(
MIBTREE_GENERATION
, 
	`disP¨amC⁄°ru˘
(
SMI_DEF
));

1343 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
OBJECT_IDENTIFIER
);

1344 
	`di•©ch
(
MIBTREE_GENERATION
, 
∑øm
);

1352 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_IDENTIFIER
);

1353 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
((
yyv•
[-6])));

1354 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

1356 
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_PARENT
);

1357 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
((
yyv•
[-2])));

1358 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

1360 
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_OID_SUFFIX
);

1361 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
((
yyv•
[-1])));

1362 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

1369 { 
	`di•©ch
(
MIBTREE_GENERATION
, 
	`disP¨amC⁄°ru˘
(
OBJECT
)); }

1375 { 
	`di•©ch
(
MIBTREE_GENERATION
, 
	`disP¨amC⁄°ru˘
(
TRAP
)); }

1382 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_IDENTIFIER
);

1383 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
((
yyv•
[-1])));

1385 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

1393 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_IDENTIFIER
);

1394 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
((
yyv•
[-1])));

1395 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

1403 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_TYPE
);

1404 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
((
yyv•
[0])));

1405 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

1413 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_TYPE
);

1414 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
((
yyv•
[0])));

1415 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

1423 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_PERMISSION
);

1424 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
((
yyv•
[0])));

1425 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

1433 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_DESCRIPTION
);

1434 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
((
yyv•
[0])));

1435 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

1443 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_PARENT
);

1444 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
((
yyv•
[-2])));

1445 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

1447 
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_OID_SUFFIX
);

1448 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
((
yyv•
[-1])));

1449 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

1469 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

1471 
	`YYPOPSTACK
 (
yyÀn
);

1472 
yyÀn
 = 0;

1473 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1475 *++
yyv•
 = 
yyvÆ
;

1481 
yyn
 = 
yyr1
[yyn];

1483 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

1484 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

1485 
yy°©e
 = 
yyèbÀ
[yystate];

1487 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

1489 
yy√w°©e
;

1495 
yyîæab
:

1498 
yytokí
 = 
yych¨
 =
YYEMPTY
 ? YYEMPTY : 
	`YYTRANSLATE
 (yychar);

1501 i‡(!
yyîr°©us
)

1503 ++
yy√ºs
;

1504 #i‡! 
YYERROR_VERBOSE


1505 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1507 
	#YYSYNTAX_ERROR
 
	`yysy¡ax_îr‹
 (&
yymsg_Æloc
, &
yymsg
, \

1508 
yys•
, 
yytokí
)

	)

1510 c⁄° *
yymsgp
 = 
	`YY_
("syntaxÉrror");

1511 
yysy¡ax_îr‹_°©us
;

1512 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

1513 i‡(
yysy¡ax_îr‹_°©us
 == 0)

1514 
yymsgp
 = 
yymsg
;

1515 i‡(
yysy¡ax_îr‹_°©us
 == 1)

1517 i‡(
yymsg
 !
yymsgbuf
)

1518 
	`YYSTACK_FREE
 (
yymsg
);

1519 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yymsg_Æloc
);

1520 i‡(!
yymsg
)

1522 
yymsg
 = 
yymsgbuf
;

1523 
yymsg_Æloc
 =  
yymsgbuf
;

1524 
yysy¡ax_îr‹_°©us
 = 2;

1528 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

1529 
yymsgp
 = 
yymsg
;

1532 
	`yyîr‹
 (
yymsgp
);

1533 i‡(
yysy¡ax_îr‹_°©us
 == 2)

1534 
yyexhau°edœb
;

1536 #unde‡
YYSYNTAX_ERROR


1542 i‡(
yyîr°©us
 == 3)

1547 i‡(
yych¨
 <
YYEOF
)

1550 i‡(
yych¨
 =
YYEOF
)

1551 
YYABORT
;

1555 
	`yyde°ru˘
 ("Error: discarding",

1556 
yytokí
, &
yylvÆ
);

1557 
yych¨
 = 
YYEMPTY
;

1563 
yyîæab1
;

1569 
yyîr‹œb
:

1575 
yyîr‹œb
;

1579 
	`YYPOPSTACK
 (
yyÀn
);

1580 
yyÀn
 = 0;

1581 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1582 
yy°©e
 = *
yys•
;

1583 
yyîæab1
;

1589 
yyîæab1
:

1590 
yyîr°©us
 = 3;

1594 
yyn
 = 
yy∑˘
[
yy°©e
];

1595 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1597 
yyn
 +
YYTERROR
;

1598 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

1600 
yyn
 = 
yyèbÀ
[yyn];

1601 i‡(0 < 
yyn
)

1607 i‡(
yys•
 =
yyss
)

1608 
YYABORT
;

1611 
	`yyde°ru˘
 ("Error:Öopping",

1612 
yy°os
[
yy°©e
], 
yyv•
);

1613 
	`YYPOPSTACK
 (1);

1614 
yy°©e
 = *
yys•
;

1615 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1618 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1619 *++
yyv•
 = 
yylvÆ
;

1620 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1624 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

1626 
yy°©e
 = 
yyn
;

1627 
yy√w°©e
;

1633 
yyac˚±œb
:

1634 
yyªsu…
 = 0;

1635 
yyªtu∫
;

1640 
yyab‹éab
:

1641 
yyªsu…
 = 1;

1642 
yyªtu∫
;

1644 #i‡!
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


1648 
yyexhau°edœb
:

1649 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

1650 
yyªsu…
 = 2;

1654 
yyªtu∫
:

1655 i‡(
yych¨
 !
YYEMPTY
)

1659 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1660 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

1661 
yytokí
, &
yylvÆ
);

1665 
	`YYPOPSTACK
 (
yyÀn
);

1666 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1667 
yys•
 !
yyss
)

1669 
	`yyde°ru˘
 ("Cleanup:Öopping",

1670 
yy°os
[*
yys•
], 
yyv•
);

1671 
	`YYPOPSTACK
 (1);

1673 #i‚de‡
yyovîÊow


1674 i‡(
yyss
 !
yysß
)

1675 
	`YYSTACK_FREE
 (
yyss
);

1677 #i‡
YYERROR_VERBOSE


1678 i‡(
yymsg
 !
yymsgbuf
)

1679 
	`YYSTACK_FREE
 (
yymsg
);

1681  
yyªsu…
;

1682 
	}
}

	@src/yy_syn.y

1 %
tokí
 
IDENTIFIER
 
OBJ_SPECIFIER


2 %
tokí
 
SYNTAX_SPECIFIER


3 %
tokí
 
ACCESS_SPECIFIER
 
ACCESS_VALUE


4 %
tokí
 
STATUS_SPECIFIER
 
STATUS_VALUE


5 %
tokí
 
DESC_SPECIFIER
 
DESC_VALUE


6 %
tokí
 
MOUNT_POINT
 
ASSIGNED


7 %
tokí
 
BEGIN_
 
END_
 
DEF
 
SEQ


8 %
tokí
 
COMMA
 
SEMICOLON
 
INDEX_
 
TRAP_SPECIFIER


9 %
tokí
 
OBJ_IDEN_
 
L_BRACE
 
R_BRACE
 
OBJECTS_


10 %
tokí
 
TYPE
 
NUM
 
FROM_
 
IMPORTS_


13 %
code
 
t›
 {

14 
	~<°dio.h
>

15 
	~"ty≥.h
"

16 
	~"mibTªeGí.h
"

17 
	~"mibTªeObjTªe.h
"

18 
	~"di•©chî.h
"

19 
	~"symbﬁTbl.h
"

20 
	#YYSTYPE
 *

	)

22 
symbﬁTabÀ
 
symTabÀ
;

23 *
yylvÆ
;

24 
yyîr‹
(c⁄° *
s
) {

25 
Ârötf
(
°dîr
, "%s: %s\n", 
s
, 
yylvÆ
);

30 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

32 
MIB
 :

33 
DEFINITION
 
IMPORT
 
MAIN_PART
;

35 
MAIN_PART
 :

36 
OBJ_DEAL
 
MAIN_PART


37 | 
OBJ
 
MAIN_PART


38 | 
TRAP
 
MAIN_PART


39 | 
SEQUENCE
 
MAIN_PART


40 | 
SMI
 
MAIN_PART


41 | 
END_
;

43 
DEFINITION
 :

44 
IDENTIFIER
 
DEF
 
ASSIGNED
 
BEGIN_
;

46 
IMPORT
 :

47 
IMPORTS_
 
MODULES
 
SEMICOLON
 {

49 i‡(
swSèã
.
cou¡î
 == 0) {

57 
MODULES
 :

58 
ITEMS
 
FROM_
 
IDENTIFIER
 
MODULES
 {

59 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
$IDENTIFIER
);

63 
ITEMS
 :

64 
IDENTIFIER


65 | 
IDENTIFIER
 
COMMA
 
ITEMS
 { }

68 
SEQUENCE
 :

69 
IDENTIFIER
 
ASSIGNED
 
SEQ
 
L_BRACE
 
SEQ_ITEM
 
R_BRACE
;

71 
SEQ_ITEM
 :

72 
IDENTIFIER
 
TYPE
 
COMMA
 
SEQ_ITEM


73 | 
IDENTIFIER
 
TYPE
;

75 
SMI
 :

76 "SMI" 
IDENTIFIER
 {

77 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_IDENTIFIER
);

78 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
(
$IDENTIFIER
));

80 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

81 
	`di•©ch
(
MIBTREE_GENERATION
, 
	`disP¨amC⁄°ru˘
(
SMI_DEF
));

85 
OBJ_DEAL
 :

86 
OBJ_IDENTIFIER
 {

87 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
OBJECT_IDENTIFIER
);

88 
	`di•©ch
(
MIBTREE_GENERATION
, 
∑øm
);

91 
OBJ_IDENTIFIER
 :

92 
IDENTIFIER
[
chû
] 
OBJ_IDEN_
 
ASSIGNED
 
L_BRACE
 IDENTIFIER[
∑ª¡
] 
NUM
 
R_BRACE
 {

93 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_IDENTIFIER
);

94 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
(
$chû
));

95 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

97 
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_PARENT
);

98 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
(
$∑ª¡
));

99 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

101 
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_OID_SUFFIX
);

102 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
(
$NUM
));

103 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

106 
OBJ
 :

107 
HEAD
 
BODY
 { 
	`di•©ch
(
MIBTREE_GENERATION
, 
	`disP¨amC⁄°ru˘
(
OBJECT
)); };

109 
TRAP
 :

110 
TRAP_HEAD
 
PROPERTY
 { 
	`di•©ch
(
MIBTREE_GENERATION
, 
	`disP¨amC⁄°ru˘
(
TRAP
)); };

112 
TRAP_HEAD
 :

113 
IDENTIFIER
 
TRAP_SPECIFIER
 {

114 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_IDENTIFIER
);

115 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
(
$IDENTIFIER
));

117 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

120 
HEAD
 :

121 
IDENTIFIER
 
OBJ_SPECIFIER
 {

122 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_IDENTIFIER
);

123 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
(
$IDENTIFIER
));

124 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

127 
BODY
 :

128 
PROPERTY
;

130 
PROPERTY
 :

131 
SYNTAX
 
PROPERTY


132 | 
ACCESS
 
PROPERTY


133 | 
STATUS
 
PROPERTY


134 | 
DESCRIPTION
 
PROPERTY


135 | 
INDEX
 
PROPERTY


136 | 
MOUNT
 
PROPERTY


137 | 
OBJECT
 
PROPERTY


140 
OBJECT
 :

141 
OBJECTS_
 
L_BRACE
 
OBJECT_ITEM
 
R_BRACE
;

143 
OBJECT_ITEM
 :

144 
IDENTIFIER
 
COMMA
 
OBJECT_ITEM


145 | 
IDENTIFIER
 ;

147 
SYNTAX
 :

148 
SYNTAX_SPECIFIER
 
SYNTAX_VALUE
 ;

150 
SYNTAX_VALUE
 :

151 
TYPE
 {

152 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_TYPE
);

153 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
(
$TYPE
));

154 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

156 | 
IDENTIFIER
 {

157 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_TYPE
);

158 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
(
$IDENTIFIER
));

159 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

162 
ACCESS
 :

163 
ACCESS_SPECIFIER
 
ACCESS_VALUE
 {

164 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_PERMISSION
);

165 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
(
$ACCESS_VALUE
));

166 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

169 
STATUS
 :

170 
STATUS_SPECIFIER
 
STATUS_VALUE
;

172 
DESCRIPTION
 :

173 
DESC_SPECIFIER
 
DESC_VALUE
 {

174 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_DESCRIPTION
);

175 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
(
$DESC_VALUE
));

176 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

179 
INDEX
 : 
INDEX_
 
L_BRACE
 
INDEX_ITEM
 
R_BRACE
;

181 
INDEX_ITEM
 :

182 
IDENTIFIER
 
COMMA
 
INDEX_ITEM


183 | 
IDENTIFIER
;

185 
MOUNT
 :

186 
ASSIGNED
 
L_BRACE
 
IDENTIFIER
 
NUM
 
R_BRACE
 {

187 
di•©chP¨am
 *
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_PARENT
);

188 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
(
$IDENTIFIER
));

189 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

191 
∑øm
 = 
	`disP¨amC⁄°ru˘
(
SLICE_OID_SUFFIX
);

192 
	`disP¨amSt‹e
(
∑øm
, 
	`disP¨amC⁄°ru˘
(
$NUM
));

193 
	`di•©ch
(
DISPATCH_PARAM_STAGE
, 
∑øm
);

196 
	}
%%

	@
1
.
0
31
519
include/dispatcher.h
include/docGenerate.h
include/lexDeal.h
include/lexer.h
include/list.h
include/mibTreeGen.h
include/mibTreeObjTree.h
include/options.h
include/queue.h
include/stack.h
include/symbolTbl.h
include/type.h
include/util.h
include/yy_syn.tab.h
src/dispatcher.c
src/docGenerate.c
src/lexDeal.c
src/lexer.c
src/list.c
src/main.c
src/mibTreeGen.c
src/mibTreeObjTree.c
src/misc.c
src/options.c
src/queue.c
src/stack.c
src/unitTest/basicDataStruct_Test.c
src/util.c
src/yy_lex.l
src/yy_syn.tab.c
src/yy_syn.y
